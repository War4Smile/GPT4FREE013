# bot.py
import re
import os
import tempfile
import logging
import asyncio
import g4f
import aiohttp
import base64
import requests
import random
import hashlib
import httpx
import json
import urllib.parse
from tenacity import retry, stop_after_attempt, wait_exponential
import pollinations as ai
from io import BytesIO
from bs4 import BeautifulSoup
from datetime import datetime
from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, BufferedInputFile, FSInputFile, BotCommand, BotCommandScopeChat, TelegramObject
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import TelegramBadRequest
from alworkproviders import AVAILABLE_PROVIDERS
from g4f.client import AsyncClient
from langdetect import detect
from httpx import HTTPStatusError
from speechmatics.batch_client import BatchClient
from speechmatics.models import BatchTranscriptionConfig
from config import BOT_TOKEN, API_DeepSeek, IMAGE_PROVIDER, IMAGE_MODEL, SPEECHMATICS_API, TRANSCRIPTION_LANGUAGE, ADMINS
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

###################################################
########### –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ###########

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_requests = {}
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_info = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
admin_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
last_image_requests = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_history = {}
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), 'user_data.json'))
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BLOCKED_USERS_FILE = 'blocked_users.json'
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = {}

# –°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_commands = [
    BotCommand(command="start", description="üîë –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand(command="image", description="üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"),
    BotCommand(command="help", description="üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    BotCommand(command="provider", description="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT"),
    BotCommand(command="imagesettings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
]
admin_commands = user_commands + [
    BotCommand(command="adminusers", description="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
]


###############################################
########### –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ###########

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        user = data.get("event_from_user")
        if user:
            user_id = user.id
            
            if user_id not in user_history:
                user_history[user_id] = []
                
            if user_id not in user_settings:
                user_settings[user_id] = {
                    "model": "flux",
                    "width": 1080,
                    "height": 1920
                }
            
            save_user_info(user)
            await update_user_activity(user)  # –î–æ–±–∞–≤–ª–µ–Ω await
        
        return await handler(event, data)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ç–æ—Ä–∏–∏
def migrate_old_history():
    for user_id, history in user_history.items():
        for i, entry in enumerate(history):
            if 'type' not in entry:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                history[i] = {
                    'type': 'text',
                    'role': entry.get('role', 'user'),
                    'content': entry.get('content', ''),
                    'timestamp': entry.get('timestamp', '')
                }
    save_users()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    global user_info, user_history, user_settings, image_requests
    try:
        if not os.path.exists(USER_DATA_FILE):
            logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            save_users()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            return
            
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        required_keys = ['user_info', 'user_history', 'user_settings', 'image_requests']
        for key in required_keys:
            if key not in data:
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            user_info = {int(k): v for k, v in data.get('user_info', {}).items()}
            user_history = {int(k): v for k, v in data.get('user_history', {}).items()}
            user_settings = {int(k): v for k, v in data.get('user_settings', {}).items()}
            image_requests = {int(k): v for k, v in data.get('image_requests', {}).items()}
            
            logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            migrate_old_history()

    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {str(e)}")
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∏—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        backup_path = f"{USER_DATA_FILE}.corrupted.{datetime.now().strftime('%Y%m%d%H%M%S')}"
        os.rename(USER_DATA_FILE, backup_path)
        logging.warning(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∏—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_path}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        user_info = {}
        user_history = {}
        user_settings = {}
        image_requests = {}
        save_users()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        user_info = {}
        user_history = {}
        user_settings = {}
        image_requests = {}
        save_users()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users():
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(USER_DATA_FILE), exist_ok=True)
        
        data = {
            'user_info': {str(k): v for k, v in user_info.items()},
            'user_history': {str(k): v for k, v in user_history.items()},
            'user_settings': {str(k): v for k, v in user_settings.items()},
            'image_requests': {str(k): v for k, v in image_requests.items()}
        }

        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
             json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_blocked_users():
    global blocked_users
    try:
        with open(BLOCKED_USERS_FILE, 'r', encoding='utf-8') as f:
            blocked_users = json.load(f)
            logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    except FileNotFoundError:
        logging.warning("–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        blocked_users = {}

    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        blocked_users = {}


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def save_blocked_users():
    with open(BLOCKED_USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(blocked_users, f, ensure_ascii=False, indent=4)
    logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
REGENERATE_CALLBACK_PREFIX = "regenerate:"
regenerate_cb = REGENERATE_CALLBACK_PREFIX 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML-—Ç–µ–≥–æ–≤
import re

def remove_html_tags(text):
    if not text:
        return ""
    soup = BeautifulSoup(text, "html.parser")
    return soup.get_text().strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
def auto_detect_language(text):
    try:
        return detect(text)
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
def format_response(response):
    response = re.sub(r'\n\s*\n', '\n\n', response.strip())
    
    code_block_pattern = re.compile(r'(```(.*?)```|!\[.*?\]\((.*?)\))', re.DOTALL)
    formatted_response = []
    last_end = 0
    
    for match in code_block_pattern.finditer(response):
        plain_text = response[last_end:match.start()].strip()
        if plain_text:
            formatted_response.append(f"<b>{plain_text}</b>")
        
        code_content = match.group(2) or match.group(3)
        if code_content:
            if match.group(2):  # –≠—Ç–æ –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫
                formatted_response.append(f"<pre><code>{code_content.strip()}</code></pre>")
            elif match.group(3):  # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                formatted_response.append(f"![{plain_text}]({code_content})")
        
        last_end = match.end()
    
    remaining_text = response[last_end:].strip()
    if remaining_text:
        formatted_response.append(f"<b>{remaining_text}</b>")
    
    return "\n".join(formatted_response)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('temp'):
    os.makedirs('temp')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ temp
def clear_temp_folder():
    for filename in os.listdir('temp'):
        file_path = os.path.join('temp', filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clear_temp_folder()

#####################################################
########### –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram ###########

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API
async def check_telegram_api_availability():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.telegram.org", timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    timeout=40
)
dp = Dispatcher()

dp.update.middleware(UserMiddleware())

# –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
current_provider = AVAILABLE_PROVIDERS[0]

###################################################
########### –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ################

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_info(user: types.User):
    user_id = user.id
    if user_id not in user_info:
        user_info[user_id] = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'date_joined': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ–ª—è
        user_info[user_id].update({
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        })

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_activity(user: types.User):
    user_id = user.id
    if user_id in user_info:
        user_info[user_id]['last_activity'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    else:
        save_user_info(user)

def is_admin(user_id: int):
    return user_id in ADMINS


async def auto_save_task():
    while True:
        await asyncio.sleep(300)
        save_users()
        logging.info("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

##########################################
########### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ###########

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def set_commands_for_user(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin(user_id):
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=user_id))
    else:
        await bot.set_my_commands(user_commands, scope=BotCommandScopeChat(chat_id=user_id))


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await set_commands_for_user(user_id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ AI. –ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    user_id = message.from_user.id
    await set_commands_for_user(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
    if is_admin(user_id):
        help_text = """

üìù –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/adminusers - üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/image - üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/clear - üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
/help - üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/provider - üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT
/imagesettings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

"""

    else:

        help_text = """

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - üîë –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/image - üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/clear - üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
/help - üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/provider - üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT
/imagesettings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

"""

    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /image
@dp.message(Command("image"))
async def cmd_image(message: Message):
    await message.answer("üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")
    user_id = message.from_user.id
    user_states[user_id] = "waiting_for_image_description"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    image_requests[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /provider
@dp.message(Command("provider"))
async def cmd_provider(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=provider, callback_data=f"provider_{provider}")]
        for provider in AVAILABLE_PROVIDERS
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /maketext
@dp.message(Command("maketext"))
async def cmd_maketext(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    sent_message = await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç—ã: aac, amr, flac, m4a, mp3, mp4, mpeg, ogg, wav) –¥–æ 512Mb.")
    user_states[message.from_user.id] = "waiting_for_audio_file"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

####################################################
################### –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ###################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(lambda query: query.data == "admin_stats")
async def handle_admin_stats(query: CallbackQuery):
    try:
        stats_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        total_users = len(user_info)
        total_messages = sum(len(h) for h in user_history.values())
        total_blocked = len(blocked_users)
        
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        stats_text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_blocked}\n\n"
        stats_text += "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        active_users = sorted(
            [(uid, len(history)) for uid, history in user_history.items()],
            key=lambda x: x[1],
            reverse=True
        )[:5]  # –¢–æ–ø-5
        
        for i, (uid, count) in enumerate(active_users, 1):
            user_info_str = get_user_info_str(uid)
            stats_text += f"{i}. {user_info_str} - {count} —Å–æ–æ–±—â.\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
        ])
        
        await query.message.edit_text(stats_text, reply_markup=keyboard)
        await query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(lambda query: query.data == "admin_main_menu")
async def handle_admin_main_menu(query: CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
        ])
        
        await query.message.edit_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {str(e)}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@dp.callback_query(lambda query: query.data == "admin_close")
async def handle_admin_close(query: CallbackQuery):
    await query.message.delete()
    await query.answer("üîí –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_timestamp(iso_timestamp):
    try:
        dt = datetime.fromisoformat(iso_timestamp)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ —Ä–æ–ª–µ–π
def get_role_icon(role):
    return {
        'user': 'üë§',
        'assistant': 'ü§ñ'
    }.get(role, '‚ùì')

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info_str(user_id: int) -> str:
    if user_id in user_info:
        info = user_info.get(user_id, {})
        name = f"{info['first_name']} {info['last_name']}" if info.get('last_name') else info['first_name']
        username = f"(@{info['username']})" if info.get('username') else ""
        return f"{name} {username}" if name else f"ID: {user_id}"
    return f"ID: {user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /adminusers
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(Command("adminusers"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda query: query.data == "admin_users_list")
async def handle_users_list(query: CallbackQuery):
    unique_users = {}
    for uid, info in user_info.items():
        unique_users[uid] = info
    
    if not unique_users:
        await query.answer("üìÇ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
        return
    
    sorted_users = sorted(unique_users.items(), key=lambda x: x[0])
    buttons = []
    for uid, info in sorted_users:
        user_text = f"üë§ {info['first_name']} {info['last_name'] or ''} (@{info['username'] or '–Ω–µ—Ç'})"
        buttons.append([InlineKeyboardButton(text=user_text, callback_data=f"admin_user_{uid}")])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")])
    
    await query.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query(lambda query: query.data.startswith("admin_message_"))
async def handle_admin_message(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    admin_states[admin_id] = {"action": "message", "target": user_id}
    
    await query.message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
@dp.message(lambda message: is_admin(message.from_user.id) and message.from_user.id in admin_states)
async def handle_admin_messages(message: Message):
    admin_id = message.from_user.id
    state = admin_states.get(admin_id)
    
    if not state:
        return
    
    text = message.text
    action = state.get("action")
    target = state.get("target")
    
    try:
        if action == "message" and target:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_accepted_{admin_id}_{target}"),
                 InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_rejected_{admin_id}_{target}")]
            ])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info_str = get_user_info_str(target)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_message = await bot.send_message(
                chat_id=target,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=admin_id,
                text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_info_str}",
                reply_to_message_id=message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            admin_states[admin_id] = {
                "action": "message",
                "target": target,
                "admin_msg_id": message.message_id,
                "user_info_str": user_info_str,
                "message_text": text
            }

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Admin error: {str(e)}")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
@dp.callback_query(lambda query: query.data.startswith("admin_user_"))
async def handle_admin_user_selection(query: CallbackQuery):
    try:
        admin_id = query.from_user.id
        if not is_admin(admin_id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_id = int(query.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        is_blocked = user_id in blocked_users
        status_text = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        action_buttons = []
        if is_blocked:
            action_buttons.append(
                InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unblock_{user_id}")
            )
        else:
            if not is_admin(user_id):  # –ó–∞–ø—Ä–µ—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–¥–º–∏–Ω–æ–≤
                action_buttons.append(
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_block_{user_id}")
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}"),
                *action_buttons
            ],
            [
                InlineKeyboardButton(text="üì® –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_message_{user_id}")
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_users_list"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
            ]
        ])
        
        await query.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_user_info_str(user_id)}\n"
            f"ID: {user_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=keyboard
        )
        await query.answer()
        
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query(lambda query: query.data.startswith("admin_history_"))
async def handle_admin_history(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if user_id not in user_history:
        await query.answer("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    user_info_data = user_info.get(user_id, {})
    username = f"(@{user_info_data.get('username', '–Ω–µ—Ç')})" if user_info_data.get('username') else ""
    name = f"{user_info_data.get('first_name', '')} {user_info_data.get('last_name', '')}".strip()
    
    history_text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} {username}\n\n"
    valid_entries = 0
    
    for entry in user_history.get(user_id, []):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        if not entry.get('timestamp'):
            continue
            
        entry_type = entry.get('type', 'text')
        timestamp = format_timestamp(entry.get('timestamp', ''))
        
        if entry_type == 'text':
            role_icon = get_role_icon(entry.get('role', 'user'))
            content = entry.get('content', '')
            history_text += f"{role_icon} [{timestamp}]:\n{content}\n\n"
            valid_entries += 1
        
        elif entry_type == 'image':
            prompt = entry.get('prompt', '')
            model = entry.get('model', '?')
            size = f"{entry.get('width', '?')}x{entry.get('height', '?')}"
            history_text += (
                f"üñº [{timestamp}]:\n"
                f"–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \"{prompt}\"\n"
                f"–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {size}\n\n"
            )
            valid_entries += 1
    
    history_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {valid_entries}"
    
    await query.message.answer(history_text)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda query: query.data.startswith("admin_block_"))
async def handle_admin_block(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if is_admin(user_id):
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    if user_id in blocked_users:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    blocked_users[user_id] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query(lambda query: query.data.startswith("admin_unblock_"))
async def handle_admin_unblock(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if user_id not in blocked_users:
        await query.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    del blocked_users[user_id]
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—è—Ç–æ" –∏ "–ù–µ –ø—Ä–∏–Ω—è—Ç–æ"
@dp.callback_query(lambda query: query.data.startswith("response_"))
async def handle_response(callback: CallbackQuery):
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ callback
    logging.info(f"Callback data: {callback.data}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    response_type = parts[1]  # "accepted" –∏–ª–∏ "rejected"
    admin_id = int(parts[2])  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = int(parts[3])   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
    if response_type == "accepted":
        new_prefix = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
    else:
        new_prefix = "‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ"

    try:      
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state = admin_states.get(admin_id, {})
        original_text = state.get("message_text", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        user_info_str = state.get("user_info_str", f"ID: {user_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        response_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info_str} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"‚ñ´Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \"{original_text}\"\n"
            f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {new_prefix}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            chat_id=admin_id,
            text=response_text,
            reply_to_message_id=state.get("admin_msg_id")
        )

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if admin_id in admin_states:
            del admin_states[admin_id]


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda query: query.data == "admin_blocked_list")
async def handle_blocked_list(query: CallbackQuery):
    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not blocked_users:
        await query.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    
    text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, block_date in blocked_users.items():
        if is_admin(user_id):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            
        user_info_str = get_user_info_str(user_id)
        text += f"{user_info_str}\n–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_date}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
    ])
    
    await query.message.edit_text(text, reply_markup=keyboard)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_cancel –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
@dp.callback_query(lambda query: query.data == "admin_cancel")
async def handle_admin_cancel(query: CallbackQuery):
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await query.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.from_user.id in blocked_users)
async def handle_blocked_user(message: Message):
    await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢)
@dp.callback_query(lambda query: query.data.startswith("admin_"))
async def handle_admin_actions(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return 
    data = query.data
    # –£–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin_user_ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if data == "admin_broadcast":
        admin_states[admin_id] = {"action": "broadcast"}
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        await query.answer()
  
    elif data == "admin_cancel":
        if admin_id in admin_states:
            del admin_states[admin_id]
        await query.message.edit_reply_markup()
        await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ admin-–¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

####################################################
########### –í—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
@dp.callback_query(lambda query: query.data.startswith("provider_"))
async def handle_provider_selection(query: CallbackQuery):
    global current_provider
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º split —Å –ª–∏–º–∏—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ "_"
    provider_name = query.data.split("_", 1)[1]
    current_provider = provider_name
    await query.message.edit_text(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {provider_name}")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message(Command("clear"))
async def cmd_clear(message: Message):
    user_id = message.from_user.id
    if user_id in user_history:
        del user_history[user_id]
    user_settings[user_id] = {
        "model": "flux",
        "width": 1080,
        "height": 1920
    }
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /imagesettings
@dp.message(Command("imagesettings"))
async def cmd_imagesettings(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ú–æ–¥–µ–ª—å: {settings['model']}", callback_data="setting_model")],
        [
            InlineKeyboardButton(text="–ö–≤–∞–¥—Ä–∞—Ç (1:1)", callback_data="setting_size_square"),
            InlineKeyboardButton(text="–ü–æ—Ä—Ç—Ä–µ—Ç (1:2)", callback_data="setting_size_portrait"),
        ],
        [
            InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂ (2:1)", callback_data="setting_size_landscape"),
            InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting_reset"),
        ]
    ])

    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda query: query.data.startswith("setting_"))
async def handle_settings_selection(query: CallbackQuery):
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    action = query.data

    if action == "setting_model":
        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="flux", callback_data="model_flux")],
            [InlineKeyboardButton(text="flux-anime", callback_data="model_flux-anime")],
            [InlineKeyboardButton(text="flux-cablyai", callback_data="model_flux-cablyai")],
        ])
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        await query.answer()

    elif action == "setting_size_square":
        settings["width"] = 1920
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ö–≤–∞–¥—Ä–∞—Ç (1920x1920)")
        await query.answer()

    elif action == "setting_size_portrait":
        settings["width"] = 1080
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–æ—Ä—Ç—Ä–µ—Ç (1080x1920)")
        await query.answer()

    elif action == "setting_size_landscape":
        settings["width"] = 1920
        settings["height"] = 1080
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–µ–π–∑–∞–∂ (1920x1080)")
        await query.answer()

    elif action == "setting_reset":
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
        await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        await query.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query(lambda query: query.data.startswith("model_"))
async def handle_model_selection(query: CallbackQuery):
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    model_name = query.data.split("_", 1)[1]
    settings["model"] = model_name
    await query.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_name}")
    await query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

##################################################
########### –ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message(lambda message: message.text and user_states.get(message.from_user.id) == "waiting_for_image_description")
async def handle_image_description(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_history[user_id].append({
        "type": "image",
        "prompt": prompt,
        "model": settings["model"],
        "width": settings["width"],
        "height": settings["height"],
        "timestamp": datetime.now().isoformat()
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É
    save_users()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_requests[user_id] = [prompt]

    await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width = settings["width"]
        height = settings["height"]
        seed = random.randint(10, 99999999)
        model = settings["model"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        encoded_prompt = urllib.parse.quote(prompt)
        params = {
            "width": width,
            "height": height,
            "seed": seed,
            "model": model,
            "nologo": "true",
            "enhance": "true"
        }
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {user_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {image_url}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º-–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        image_data = await download_image_with_retry(image_url)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è
        sent_message = await message.answer_photo(
            photo=input_file,
            caption=f"üñº –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        last_image_requests[user_id] = {
            "prompt": prompt,
            "model": model,
            "width": width,
            "height": height
        }

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_states[user_id] = None
        image_requests[user_id] = []

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        user_states[user_id] = None
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def download_image_with_retry(image_url):
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url, timeout=300) as response:
            if response.status == 200:
                return await response.read()
            error_text = await response.text()
            logging.error(f"Pollinations API –æ—à–∏–±–∫–∞: {response.status} - {error_text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.callback_query(lambda query: query.data.startswith("regenerate:"))
async def handle_regenerate(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id not in last_image_requests:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ last_image_requests
    request_data = last_image_requests[user_id]
    prompt = request_data["prompt"]
    model = request_data["model"]
    width = request_data["width"]
    height = request_data["height"]
    new_seed = random.randint(10, 99999999)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    encoded_prompt = urllib.parse.quote(prompt)
    params = {
        "width": width,
        "height": height,
        "seed": new_seed,
        "model": model,
        "nologo": "true",
        "enhance": "true"
    }
    image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    logging.info(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        image_data = await download_image_with_retry(image_url)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.answer_photo(
            photo=input_file,
            caption=f"üñº –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {new_seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        await callback.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@dp.callback_query(lambda query: query.data.startswith("accept:"))
async def handle_accept(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id in last_image_requests:
        del last_image_requests[user_id]
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∫–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã.")
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è", show_alert=True)


###########################################################
########### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ########### 


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
async def get_existing_jobs(api_key):
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    async with httpx.AsyncClient() as client:
        response = await client.get("https://asr.api.speechmatics.com/v2/jobs/", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ job_id
async def get_transcript(job_id, api_key):
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    async with httpx.AsyncClient() as client:
        response = await client.get(f"https://asr.api.speechmatics.com/v2/jobs/{job_id}/transcript?format=txt", headers=headers)
        if response.status_code == 200:
            return response.text
        else:
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
async def handle_audio_file(message: Message):
    user_id = message.from_user.id
    audio_file = message.audio or message.voice or message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if audio_file.mime_type not in ["audio/aac", "audio/amr", "audio/flac", "audio/m4a", "audio/mpeg", "audio/mp4", "audio/ogg", "audio/wav"]:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: aac, amr, flac, m4a, mp3, mp4, mpeg, ogg, wav, –æ–±—ä–µ–º–æ–º –¥–æ 512Mb.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await bot.get_file(audio_file.file_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É temp
    file_path = os.path.join('temp', f"{audio_file.file_id}.audio")
    await bot.download_file(file_info.file_path, destination=file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    if not os.path.exists(file_path):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
    checking_message = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", disable_notification=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    existing_jobs = await get_existing_jobs(SPEECHMATICS_API)

    if existing_jobs:
        for job in existing_jobs.get('jobs', []):
            if job['data_name'] == os.path.basename(file_path):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
                await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", disable_notification=True)
                transcript = await get_transcript(job['id'], SPEECHMATICS_API)  # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                if transcript:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
                    temp_file_path = os.path.join('temp', f"{job['id']}.txt")
                    with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                        temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                    audio_file = FSInputFile(temp_file_path)
                    await bot.send_document(user_id, audio_file, disable_notification=True)
                else:
                    await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.", disable_notification=True)
                return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", disable_notification=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    try:
        with BatchClient(SPEECHMATICS_API) as client:
            job_id = client.submit_job(file_path, BatchTranscriptionConfig(TRANSCRIPTION_LANGUAGE))
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", disable_notification=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            asyncio.create_task(check_job_status(job_id, user_id))

    except Exception as e:
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", disable_notification=True)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def check_job_status(job_id, user_id):
    while True:
        await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        transcript = await get_transcript(job_id, SPEECHMATICS_API)
        if transcript:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
            try:
                temp_file_path = os.path.join('temp', f"{job_id}.txt")
                with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                    temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                audio_file = FSInputFile(temp_file_path)
                sent_message = await bot.send_document(user_id, audio_file, disable_notification=True)
                await bot.delete_message(chat_id=user_id, message_id=sent_message.message_id - 1)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            except Exception as e:
                await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", disable_notification=True)
            break
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
            continue

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
async def handle_existing_jobs(user_id, file_path):
    existing_jobs = await get_existing_jobs(SPEECHMATICS_API)

    if existing_jobs:
        for job in existing_jobs.get('jobs', []):
            if job['data_name'] == os.path.basename(file_path):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                sent_message = await bot.send_message(user_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", disable_notification=True)
                transcript = await get_transcript(job['id'], SPEECHMATICS_API)  # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é

                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
                try:
                    temp_file_path = os.path.join('temp', f"{job['id']}.txt")
                    with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                        temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                    audio_file = FSInputFile(temp_file_path)
                    await bot.send_document(user_id, audio_file, disable_notification=True)
                    await bot.delete_message(chat_id=user_id, message_id=sent_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
                except Exception as e:
                    await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", disable_notification=True)
                break


#####################################################
# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ #
async def is_waiting_for_audio_file(message: Message):
    return user_states.get(message.from_user.id) == "waiting_for_audio_file" and \
           (message.content_type == 'audio' or message.content_type == 'voice' or message.content_type == 'document')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
dp.message(is_waiting_for_audio_file)(handle_audio_file)

################################################
########### –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(lambda message: message.reply_to_message and is_admin(message.reply_to_message.from_user.id))
async def handle_admin_reply(message: Message):
    admin_id = message.reply_to_message.from_user.id
    user_id = message.from_user.id
    user_message = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(admin_id, f"üë§ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{user_message}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@dp.message(lambda message: message.text is not None and not (message.reply_to_message and is_admin(message.reply_to_message.from_user.id)))
async def handle_message(message: Message):
    global current_provider
    user_id = message.from_user.id
    user_input = message.text
    
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
        api_messages = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in user_history.get(user_id, [])
            if msg.get("type") == "text"  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            and "role" in msg
            and "content" in msg
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_entry = {
            "type": "text",
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now().isoformat()
        }
        api_messages.append({"role": "user", "content": user_input})
        
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        
        provider_class = getattr(g4f.Provider, current_provider)
        response = await g4f.ChatCompletion.create_async(
            model=g4f.models.default,
            messages=api_messages,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            provider=provider_class(),
            api_key=API_DeepSeek
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history.setdefault(user_id, []).append(user_entry)
        assistant_entry = {
            "type": "text",
            "role": "assistant",
            "content": remove_html_tags(response),
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(assistant_entry)
        save_users()
        
        formatted_response = format_response(response)
        await message.answer(formatted_response, parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {str(e)}")
        current_provider = AVAILABLE_PROVIDERS[0]
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ {current_provider}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.content_type in ['photo', 'document', 'video', 'sticker'])
async def handle_media(message: Message):
    if message.content_type == 'photo':
        await message.answer("üñº –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /image")
    else:
        await message.answer("‚ùå –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è.")

######################################################
########### –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ###########
async def wait_for_telegram_api():
    while True:
        if await check_telegram_api_availability():
            logging.info("Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        logging.error("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
        await asyncio.sleep(10)

async def auto_save_task():
    while True:
        await asyncio.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        save_users()
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    asyncio.create_task(auto_save_task())
    await wait_for_telegram_api()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        load_users()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)
        print("\n–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        save_users()
        print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")