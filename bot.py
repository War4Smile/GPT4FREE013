# bot.py
import re
import os
import tempfile
import logging
import asyncio
import g4f
import aiohttp
import base64
import requests
import random
import hashlib
import httpx
import json
import config
import urllib.parse
import pollinations as ai
from aiogram import Bot, Dispatcher, types, BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, BufferedInputFile, FSInputFile, BotCommand, BotCommandScopeChat, TelegramObject
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.exceptions import TelegramBadRequest
from alworkproviders import AVAILABLE_PROVIDERS
from bs4 import BeautifulSoup
from datetime import datetime
from g4f.client import AsyncClient
from httpx import HTTPStatusError
from io import BytesIO
from langdetect import detect
from PIL import Image
from pydub import AudioSegment
from speechmatics.batch_client import BatchClient
from speechmatics.models import BatchTranscriptionConfig
from tenacity import retry, stop_after_attempt, wait_exponential

from config import (
    BOT_TOKEN,
    API_DeepSeek,
    IMAGE_PROVIDER,
    IMAGE_MODEL,
    SPEECHMATICS_API,
    TRANSCRIPTION_LANGUAGE,
    ADMINS,
    DEFAULT_TRANSLATION_MODEL,
    DEFAULT_TRANSLATION_PROVIDER
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

###################################################
########### –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ###########

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_requests = {}
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_info = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
admin_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
last_image_requests = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_history = {}
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = os.path.abspath(os.path.join(os.path.dirname(__file__), 'user_data.json'))
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BLOCKED_USERS_FILE = 'blocked_users.json'
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
user_analysis_states = {}  # –ù–∞–ø—Ä–∏–º–µ—Ä: {user_id: "waiting_for_image_analysis"}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞
user_analysis_settings = {}  # –ù–∞–ø—Ä–∏–º–µ—Ä: {user_id: {"quality": "high"}}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
image_analysis_requests = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
user_transcribe_states = {}  # –ù–∞–ø—Ä–∏–º–µ—Ä: {user_id: "waiting_for_audio_transcribe"}

# –°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_commands = [    
    BotCommand(command="start", description="üîë –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand(command="image", description="üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    BotCommand(command="analyze", description="üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
    BotCommand(command="generateaudio", description="üéôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"),
    BotCommand(command="translatetoeng", description="üîç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"),
    BotCommand(command="translatetoru", description="üîç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –†—É—Å—Å–∫–∏–π"),
    BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"),
    BotCommand(command="help", description="üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    BotCommand(command="provider", description="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT"),
    BotCommand(command="imagesettings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
]
admin_commands = user_commands + [
    BotCommand(command="tts", description="üéôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"),
    BotCommand(command="transcribe", description="üé§ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"),
    BotCommand(command="analysissettings", description="üîé –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"),
    BotCommand(command="adminusers", description="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
]


###############################################
########### –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ###########

# –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: TelegramObject, data: dict):
        user = data.get("event_from_user")
        if user:
            user_id = user.id
            
            if user_id not in user_history:
                user_history[user_id] = []
                
            if user_id not in user_settings:
                user_settings[user_id] = {
                    "model": "flux",
                    "width": 1080,
                    "height": 1920
                }
            
            save_user_info(user)
            await update_user_activity(user)  # –î–æ–±–∞–≤–ª–µ–Ω await
        
        return await handler(event, data)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∏—Å—Ç–æ—Ä–∏–∏
def migrate_old_history():
    for user_id, history in user_history.items():
        for i, entry in enumerate(history):
            if 'type' not in entry:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                history[i] = {
                    'type': 'text',
                    'role': entry.get('role', 'user'),
                    'content': entry.get('content', ''),
                    'timestamp': entry.get('timestamp', '')
                }
    save_users()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    global user_info, user_history, user_settings, image_requests
    try:
        if not os.path.exists(USER_DATA_FILE):
            logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            save_users()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            return
            
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        required_keys = ['user_info', 'user_history', 'user_settings', 'image_requests']
        for key in required_keys:
            if key not in data:
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key} –≤ —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            user_info = {int(k): v for k, v in data.get('user_info', {}).items()}
            user_history = {int(k): v for k, v in data.get('user_history', {}).items()}
            user_settings = {int(k): v for k, v in data.get('user_settings', {}).items()}
            image_requests = {int(k): v for k, v in data.get('image_requests', {}).items()}
            
            logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            migrate_old_history()

    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {str(e)}")
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∏—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        backup_path = f"{USER_DATA_FILE}.corrupted.{datetime.now().strftime('%Y%m%d%H%M%S')}"
        os.rename(USER_DATA_FILE, backup_path)
        logging.warning(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∏—Ç–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_path}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        user_info = {}
        user_history = {}
        user_settings = {}
        image_requests = {}
        save_users()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        logging.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        user_info = {}
        user_history = {}
        user_settings = {}
        image_requests = {}
        save_users()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users():
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(USER_DATA_FILE), exist_ok=True)
        
        data = {
            'user_info': {str(k): v for k, v in user_info.items()},
            'user_history': {str(k): v for k, v in user_history.items()},
            'user_settings': {str(k): v for k, v in user_settings.items()},
            'image_requests': {str(k): v for k, v in image_requests.items()}
        }

        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
             json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_blocked_users():
    global blocked_users
    try:
        with open(BLOCKED_USERS_FILE, 'r', encoding='utf-8') as f:
            blocked_users = json.load(f)
            logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    except FileNotFoundError:
        logging.warning("–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        blocked_users = {}

    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        blocked_users = {}


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_blocked_users():
    with open(BLOCKED_USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(blocked_users, f, ensure_ascii=False, indent=4)
    logging.info("–î–∞–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
REGENERATE_CALLBACK_PREFIX = "regenerate:"
regenerate_cb = REGENERATE_CALLBACK_PREFIX 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML-—Ç–µ–≥–æ–≤
def remove_html_tags(text):
    if not text:
        return ""
    soup = BeautifulSoup(text, "html.parser")
    return soup.get_text().strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
def auto_detect_language(text):
    try:
        return detect(text)
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
def format_response(response):
    response = re.sub(r'\n\s*\n', '\n\n', response.strip())
    
    code_block_pattern = re.compile(r'(```(.*?)```|!\[.*?\]\((.*?)\))', re.DOTALL)
    formatted_response = []
    last_end = 0
    
    for match in code_block_pattern.finditer(response):
        plain_text = response[last_end:match.start()].strip()
        if plain_text:
            formatted_response.append(f"<b>{plain_text}</b>")
        
        code_content = match.group(2) or match.group(3)
        if code_content:
            if match.group(2):  # –≠—Ç–æ –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫
                formatted_response.append(f"<pre><code>{code_content.strip()}</code></pre>")
            elif match.group(3):  # –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                formatted_response.append(f"![{plain_text}]({code_content})")
        
        last_end = match.end()
    
    remaining_text = response[last_end:].strip()
    if remaining_text:
        formatted_response.append(f"<b>{remaining_text}</b>")
    
    return "\n".join(formatted_response)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('temp'):
    os.makedirs('temp')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ temp
def clear_temp_folder():
    for filename in os.listdir('temp'):
        file_path = os.path.join('temp', filename)
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
clear_temp_folder()

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def get_available_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å Pollinations AI"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://image.pollinations.ai/models", timeout=30) as response:
                if response.status == 200:
                    models = await response.json()
                    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    return models
                else:
                    error_text = await response.text()
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {response.status} - {error_text}")
                    return ["flux", "flux-anime", "flux-cablyai"]  # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏: {str(e)}")
        return ["flux", "flux-anime", "flux-cablyai"]

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def transcribe_with_retry(payload):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://text.pollinations.ai/openai", 
            json=payload, 
            timeout=300
        ) as response:
            if response.status == 200:
                return await response.json()
            error_text = await response.text()
            logging.error(f"Pollinations API –æ—à–∏–±–∫–∞: {response.status} - {error_text}")
            raise Exception(f"–û—à–∏–±–∫–∞ API: {error_text}")

def convert_to_mp3(input_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ MP3 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        audio = AudioSegment.from_file(input_path)
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        audio.export(output_path, format="mp3", bitrate="64k", parameters=["-ac", "1"])
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3: {str(e)}")
        return False

def split_audio(file_path, chunk_length_ms=300000):  # 5 –º–∏–Ω—É—Ç
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    try:
        audio = AudioSegment.from_file(file_path)
        chunks = []
        
        for i in range(0, len(audio), chunk_length_ms):
            chunk = audio[i:i+chunk_length_ms]
            chunk_path = os.path.join(tempfile.gettempdir(), f"chunk_{i//1000}.mp3")
            chunk.export(chunk_path, format="mp3", bitrate="64k", parameters=["-ac", "1"])
            chunks.append(chunk_path)
        
        return chunks
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}")
        return []

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
async def translate_to_english(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –ò–ò-–º–æ–¥–µ–ª–∏"""
    if not text:
        return text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    from langdetect import detect
    detected_lang = detect(text)
    if detected_lang != "ru":
        return text  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —Ä—É—Å—Å–∫–∏–π
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
        async with aiohttp.ClientSession() as session:
            response = await g4f.ChatCompletion.create_async(
                model=DEFAULT_TRANSLATION_MODEL,
                messages=[
                    {"role": "system", "content": "You are a professional translator. You main task translate the following text to English, give only translate:"},
                    {"role": "user", "content": text}
                ],
                provider=getattr(g4f.Provider,DEFAULT_TRANSLATION_PROVIDER),
                api_key=None
            )
        return response.strip()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –†—É—Å—Å–∫–∏–π
async def translate_to_russian(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –ò–ò-–º–æ–¥–µ–ª–∏"""
    if not text:
        return text
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
        async with aiohttp.ClientSession() as session:
            response = await g4f.ChatCompletion.create_async(
                model=DEFAULT_TRANSLATION_MODEL,
                messages=[
                    {"role": "system", "content": "You are a professional translator. You main task translate the following text to Russian, give only translate:"},
                    {"role": "user", "content": text}
                ],
                provider=getattr(g4f.Provider,DEFAULT_TRANSLATION_PROVIDER),
                api_key=None
            )
        return response.strip()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

#####################################################
########### –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram ###########

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API
async def check_telegram_api_availability():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.telegram.org", timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    timeout=40
)
dp = Dispatcher()

dp.update.middleware(UserMiddleware())

# –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
current_provider = AVAILABLE_PROVIDERS[0]

###################################################
########### –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ################

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_info(user: types.User):
    user_id = user.id
    if user_id not in user_info:
        user_info[user_id] = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'date_joined': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'last_activity': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–æ–ª—è
        user_info[user_id].update({
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        })

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_activity(user: types.User):
    user_id = user.id
    if user_id in user_info:
        user_info[user_id]['last_activity'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    else:
        save_user_info(user)

def is_admin(user_id: int):
    return user_id in ADMINS


async def auto_save_task():
    while True:
        await asyncio.sleep(300)
        save_users()
        logging.info("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

##########################################
########### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ###########

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def set_commands_for_user(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if is_admin(user_id):
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=user_id))
    else:
        await bot.set_my_commands(user_commands, scope=BotCommandScopeChat(chat_id=user_id))


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await set_commands_for_user(user_id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ AI. –ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    user_id = message.from_user.id
    await set_commands_for_user(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
    if is_admin(user_id):
        help_text = """

üìù –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/adminusers - üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/image - üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/clear - üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
/help - üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/provider - üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT
/imagesettings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

"""

    else:

        help_text = """

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - üîë –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/image - üñº –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/clear - üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
/help - üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/provider - üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å GPT
/imagesettings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

"""

    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /image
@dp.message(Command("image"))
async def cmd_image(message: Message):
    await message.answer("üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:")
    user_id = message.from_user.id
    user_states[user_id] = "waiting_for_image_description"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    image_requests[user_id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /provider
@dp.message(Command("provider"))
async def cmd_provider(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=provider, callback_data=f"provider_{provider}")]
        for provider in AVAILABLE_PROVIDERS
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /maketext
@dp.message(Command("maketext"))
async def cmd_maketext(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    sent_message = await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç—ã: aac, amr, flac, m4a, mp3, mp4, mpeg, ogg, wav) –¥–æ 512Mb.")
    user_states[message.from_user.id] = "waiting_for_audio_file"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

####################################################
################### –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ###################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(lambda query: query.data == "admin_stats")
async def handle_admin_stats(query: CallbackQuery):
    try:
        stats_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        total_users = len(user_info)
        total_messages = sum(len(h) for h in user_history.values())
        total_blocked = len(blocked_users)
        total_transcriptions = sum(
            1 for entries in user_history.values() 
            for entry in entries 
            if entry.get("type") == "transcribe"
        )
        total_audio = sum(
            1 for entries in user_history.values() 
            for entry in entries 
            if entry.get("type") == "audio"
        )

        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        stats_text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_blocked}\n\n"
        stats_text += f"\nüé§ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π: {total_transcriptions}"
        stats_text += f"\nüéôÔ∏è –í—Å–µ–≥–æ –∞—É–¥–∏–æ: {total_audio}"
        stats_text += "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        active_users = sorted(
            [(uid, len(history)) for uid, history in user_history.items()],
            key=lambda x: x[1],
            reverse=True
        )[:5]  # –¢–æ–ø-5
        
        for i, (uid, count) in enumerate(active_users, 1):
            user_info_str = get_user_info_str(uid)
            stats_text += f"{i}. {user_info_str} - {count} —Å–æ–æ–±—â.\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
        ])
        
        await query.message.edit_text(stats_text, reply_markup=keyboard)
        await query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(lambda query: query.data == "admin_main_menu")
async def handle_admin_main_menu(query: CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
        ])
        
        await query.message.edit_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {str(e)}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@dp.callback_query(lambda query: query.data == "admin_close")
async def handle_admin_close(query: CallbackQuery):
    await query.message.delete()
    await query.answer("üîí –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_timestamp(iso_timestamp):
    try:
        dt = datetime.fromisoformat(iso_timestamp)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ —Ä–æ–ª–µ–π
def get_role_icon(role):
    return {
        'user': 'üë§',
        'assistant': 'ü§ñ'
    }.get(role, '‚ùì')

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info_str(user_id: int) -> str:
    if user_id in user_info:
        info = user_info.get(user_id, {})
        name = f"{info['first_name']} {info['last_name']}" if info.get('last_name') else info['first_name']
        username = f"(@{info['username']})" if info.get('username') else ""
        return f"{name} {username}" if name else f"ID: {user_id}"
    return f"ID: {user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /adminusers
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(Command("adminusers"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda query: query.data == "admin_users_list")
async def handle_users_list(query: CallbackQuery):
    unique_users = {}
    for uid, info in user_info.items():
        unique_users[uid] = info
    
    if not unique_users:
        await query.answer("üìÇ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
        return
    
    sorted_users = sorted(unique_users.items(), key=lambda x: x[0])
    buttons = []
    for uid, info in sorted_users:
        user_text = f"üë§ {info['first_name']} {info['last_name'] or ''} (@{info['username'] or '–Ω–µ—Ç'})"
        buttons.append([InlineKeyboardButton(text=user_text, callback_data=f"admin_user_{uid}")])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")])
    
    await query.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query(lambda query: query.data.startswith("admin_message_"))
async def handle_admin_message(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    admin_states[admin_id] = {"action": "message", "target": user_id}
    
    await query.message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
@dp.message(lambda message: is_admin(message.from_user.id) and message.from_user.id in admin_states)
async def handle_admin_messages(message: Message):
    admin_id = message.from_user.id
    state = admin_states.get(admin_id)
    
    if not state:
        return
    
    text = message.text
    action = state.get("action")
    target = state.get("target")
    
    try:
        if action == "message" and target:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_accepted_{admin_id}_{target}"),
                 InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_rejected_{admin_id}_{target}")]
            ])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info_str = get_user_info_str(target)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_message = await bot.send_message(
                chat_id=target,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=admin_id,
                text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_info_str}",
                reply_to_message_id=message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            admin_states[admin_id] = {
                "action": "message",
                "target": target,
                "admin_msg_id": message.message_id,
                "user_info_str": user_info_str,
                "message_text": text
            }

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Admin error: {str(e)}")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
@dp.callback_query(lambda query: query.data.startswith("admin_user_"))
async def handle_admin_user_selection(query: CallbackQuery):
    try:
        admin_id = query.from_user.id
        if not is_admin(admin_id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_id = int(query.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        is_blocked = user_id in blocked_users
        status_text = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        action_buttons = []
        if is_blocked:
            action_buttons.append(
                InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unblock_{user_id}")
            )
        else:
            if not is_admin(user_id):  # –ó–∞–ø—Ä–µ—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–¥–º–∏–Ω–æ–≤
                action_buttons.append(
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_block_{user_id}")
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}"),
                *action_buttons
            ],
            [
                InlineKeyboardButton(text="üì® –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_message_{user_id}")
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_users_list"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
            ]
        ])
        
        await query.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_user_info_str(user_id)}\n"
            f"ID: {user_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=keyboard
        )
        await query.answer()
        
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query(lambda query: query.data.startswith("admin_history_"))
async def handle_admin_history(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    history = user_history.get(user_id, [])
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    MAX_MESSAGE_LENGTH = 4000  
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n"
    valid_entries = 0
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏
    for entry in history:
        entry_type = entry.get("type", "unknown")
        
        if entry_type == "text":
            role = entry.get("role", "user")
            content = entry.get("content", "")
            timestamp = entry.get("timestamp", "")
            prefix = "üë§" if role == "user" else "ü§ñ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
            entry_text = f"{prefix} {role.capitalize()} ({timestamp}):\n{content}\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            if len(history_text) + len(entry_text) > MAX_MESSAGE_LENGTH:
                await query.message.answer(history_text)
                history_text = ""  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            
            history_text += entry_text
            valid_entries += 1
        
        elif entry_type == "image":
            prompt = entry.get("prompt", "")
            model = entry.get("model", "")
            width = entry.get("width", "")
            height = entry.get("height", "")
            history_text += f"üñº –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}\n\n"
            valid_entries += 1
        
        elif entry_type == "transcribe":
            response = entry.get("response", "")
            history_text += f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {response[:50]}...\n\n"
            valid_entries += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
    if history_text.strip():
        await query.message.answer(history_text)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
    ])
    
    if valid_entries == 0:
        await query.message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    
    await query.message.answer("–ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=keyboard)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda query: query.data.startswith("admin_block_"))
async def handle_admin_block(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if is_admin(user_id):
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    if user_id in blocked_users:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    blocked_users[user_id] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query(lambda query: query.data.startswith("admin_unblock_"))
async def handle_admin_unblock(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if user_id not in blocked_users:
        await query.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    del blocked_users[user_id]
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—è—Ç–æ" –∏ "–ù–µ –ø—Ä–∏–Ω—è—Ç–æ"
@dp.callback_query(lambda query: query.data.startswith("response_"))
async def handle_response(callback: CallbackQuery):
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ callback
    logging.info(f"Callback data: {callback.data}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    response_type = parts[1]  # "accepted" –∏–ª–∏ "rejected"
    admin_id = int(parts[2])  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = int(parts[3])   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
    if response_type == "accepted":
        new_prefix = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
    else:
        new_prefix = "‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ"

    try:      
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state = admin_states.get(admin_id, {})
        original_text = state.get("message_text", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        user_info_str = state.get("user_info_str", f"ID: {user_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        response_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info_str} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"‚ñ´Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \"{original_text}\"\n"
            f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {new_prefix}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            chat_id=admin_id,
            text=response_text,
            reply_to_message_id=state.get("admin_msg_id")
        )

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if admin_id in admin_states:
            del admin_states[admin_id]


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda query: query.data == "admin_blocked_list")
async def handle_blocked_list(query: CallbackQuery):
    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not blocked_users:
        await query.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    
    text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, block_date in blocked_users.items():
        if is_admin(user_id):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            
        user_info_str = get_user_info_str(user_id)
        text += f"{user_info_str}\n–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_date}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
    ])
    
    await query.message.edit_text(text, reply_markup=keyboard)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_cancel –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
@dp.callback_query(lambda query: query.data == "admin_cancel")
async def handle_admin_cancel(query: CallbackQuery):
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await query.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.from_user.id in blocked_users)
async def handle_blocked_user(message: Message):
    await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢)
@dp.callback_query(lambda query: query.data.startswith("admin_"))
async def handle_admin_actions(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return 
    data = query.data
    # –£–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin_user_ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if data == "admin_broadcast":
        admin_states[admin_id] = {"action": "broadcast"}
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        await query.answer()
  
    elif data == "admin_cancel":
        if admin_id in admin_states:
            del admin_states[admin_id]
        await query.message.edit_reply_markup()
        await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ admin-–¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

####################################################
########### –í—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
@dp.callback_query(lambda query: query.data.startswith("provider_"))
async def handle_provider_selection(query: CallbackQuery):
    global current_provider
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º split —Å –ª–∏–º–∏—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ "_"
    provider_name = query.data.split("_", 1)[1]
    current_provider = provider_name
    await query.message.edit_text(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {provider_name}")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@dp.message(Command("clear"))
async def cmd_clear(message: Message):
    user_id = message.from_user.id
    if user_id in user_history:
        del user_history[user_id]
    user_settings[user_id] = {
        "model": "flux",
        "width": 1080,
        "height": 1920
    }
    await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /imagesettings
@dp.message(Command("imagesettings"))
async def cmd_imagesettings(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    available_models = await get_available_models()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    keyboard_buttons = []
    for i, model in enumerate(available_models):
        if i % 2 == 0:
            keyboard_buttons.append([])
        keyboard_buttons[-1].append(
            InlineKeyboardButton(text=model, callback_data=f"model_{model}")
        )
    
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="–ö–≤–∞–¥—Ä–∞—Ç (1:1)", callback_data="setting_size_square")],
        [InlineKeyboardButton(text="–ü–æ—Ä—Ç—Ä–µ—Ç (1:2)", callback_data="setting_size_portrait"),
         InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂ (2:1)", callback_data="setting_size_landscape")],
        [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data="setting_reset")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda query: query.data.startswith("setting_"))
async def handle_settings_selection(query: CallbackQuery):
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    action = query.data

    if action == "setting_model":
        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="flux", callback_data="model_flux")],
            [InlineKeyboardButton(text="flux-anime", callback_data="model_flux-anime")],
            [InlineKeyboardButton(text="flux-cablyai", callback_data="model_flux-cablyai")],
        ])
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        await query.answer()

    elif action == "setting_size_square":
        settings["width"] = 1920
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ö–≤–∞–¥—Ä–∞—Ç (1920x1920)")
        await query.answer()

    elif action == "setting_size_portrait":
        settings["width"] = 1080
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–æ—Ä—Ç—Ä–µ—Ç (1080x1920)")
        await query.answer()

    elif action == "setting_size_landscape":
        settings["width"] = 1920
        settings["height"] = 1080
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–µ–π–∑–∞–∂ (1920x1080)")
        await query.answer()

    elif action == "setting_reset":
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
        await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        await query.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query(lambda query: query.data.startswith("model_"))
async def handle_model_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected_model = callback.data.split("_", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
    available_models = await get_available_models()
    if selected_model not in available_models:
        await callback.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings[user_id]["model"] = selected_model
    save_users()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model}")
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

##################################################
########### –ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message(lambda message: message.text and user_states.get(message.from_user.id) == "waiting_for_image_description")
async def handle_image_description(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å —Ç–æ–∫–µ–Ω–∞
    if settings["model"] == "gptimage" and not config.GPTIMAGE_API_TOKEN:
        await message.answer(
            "üîí –ú–æ–¥–µ–ª—å 'gptimage' —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            "https://github.com/pollinations/pollinations/issues/new?template=special-bee-request.yml "
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    user_history[user_id].append({
        "type": "image",
        "prompt": prompt,
        "translated_prompt": translated_prompt,
        "model": settings["model"],
        "width": settings["width"],
        "height": settings["height"],
        "timestamp": datetime.now().isoformat()
    })
    save_users()
    image_requests[user_id].append(prompt)

    await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        width = settings["width"]
        height = settings["height"]
        seed = random.randint(10, 99999999)
        model = settings["model"]

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated_prompt = await translate_to_english(prompt)
        logging.info(f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {prompt} -> {translated_prompt}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        encoded_prompt = urllib.parse.quote(translated_prompt)  # ‚ùå –ë—ã–ª–æ: prompt
        params = {
            "width": width,
            "height": height,
            "seed": seed,
            "model": model,
            "nologo": "true"
        }
        
        if model == "gptimage":
            headers = {"Authorization": f"Bearer {config.GPTIMAGE_API_TOKEN}"}
        else:
            headers = {}
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
        
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=300) as response:
                if response.status == 200:
                    image_data = await response.read()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {await response.text()}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        sent_message = await message.answer_photo(
            photo=input_file,
            caption=f"üñº –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ last_image_requests
        last_image_requests[user_id] = {
            "prompt": prompt,
            "translated_prompt": translated_prompt,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "model": model,
            "width": width,
            "height": height
        }

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = None
        image_requests[user_id] = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def download_image_with_retry(image_url):
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url, timeout=300) as response:
            if response.status == 200:
                return await response.read()
            error_text = await response.text()
            logging.error(f"Pollinations API –æ—à–∏–±–∫–∞: {response.status} - {error_text}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.callback_query(lambda query: query.data.startswith("regenerate:"))
async def handle_regenerate(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id not in last_image_requests:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ last_image_requests
    request_data = last_image_requests[user_id]
    original_prompt = request_data["prompt"]
    translated_prompt = request_data.get("translated_prompt", await translate_to_english(original_prompt))  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    model = request_data["model"]
    width = request_data["width"]
    height = request_data["height"]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ seed
    new_seed = random.randint(10, 99999999)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    encoded_prompt = urllib.parse.quote(translated_prompt)  # ‚ùå –ë—ã–ª–æ: original_prompt
    params = {
        "width": width,
        "height": height,
        "seed": new_seed,
        "model": model,
        "nologo": "true"
    }
    image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
    
    logging.info(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=300) as response:
                if response.status == 200:
                    image_data = await response.read()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {await response.text()}")
                    await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", show_alert=True)
                    return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await callback.message.answer_photo(
            photo=input_file,
            caption=f"üñº –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: '{original_prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {new_seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        await callback.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º last_image_requests —Å –Ω–æ–≤—ã–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        last_image_requests[user_id]["translated_prompt"] = await translate_to_english(original_prompt)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@dp.callback_query(lambda query: query.data.startswith("accept:"))
async def handle_accept(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id in last_image_requests:
        del last_image_requests[user_id]
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∫–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã.")
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è", show_alert=True)


##################################################
########### –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ###########

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞
def get_user_analysis_settings(user_id):
    if user_id not in user_analysis_settings:
        user_analysis_settings[user_id] = {"quality": "high"}
    return user_analysis_settings[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze
@dp.message(Command("analyze"))
async def cmd_analyze(message: Message):
    user_id = message.from_user.id
    await message.answer("üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    user_analysis_states[user_id] = "waiting_for_image_analysis"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analysissettings
@dp.message(Command("analysissettings"))
async def cmd_analysis_settings(message: Message):
    user_id = message.from_user.id
    settings = get_user_analysis_settings(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ö–∞—á–µ—Å—Ç–≤–æ: {settings['quality']}", callback_data="analysis_quality")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality_high")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality_medium")],
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality_low")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="analysis_settings_back")]
    ])
    await message.answer("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
@dp.callback_query(lambda query: query.data.startswith("quality_"))
async def handle_analysis_quality(callback: CallbackQuery):
    user_id = callback.from_user.id
    quality = callback.data.split("_")[1]
    
    if user_id not in user_analysis_settings:
        user_analysis_settings[user_id] = {}
    user_analysis_settings[user_id]["quality"] = quality
    
    await callback.message.edit_text(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {quality}")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.callback_query(lambda query: query.data == "analysis_settings_back")
async def handle_analysis_settings_back(callback: CallbackQuery):
    await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:")
    # ... (–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
@dp.message(lambda message: message.photo or (message.document and message.document.mime_type.startswith('image/')))
async def handle_image_analysis(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if user_analysis_states.get(user_id) != "waiting_for_image_analysis":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∞–Ω–∞–ª–∏–∑
    
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1] if message.photo else message.document
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        image_data = await bot.download_file(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if file_info.file_size > config.MAX_IMAGE_SIZE:
            await message.answer("‚ùå –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 512 MB")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image = Image.open(BytesIO(image_data.getvalue()))
        image_format = image.format.lower() or "jpeg"
        image_data.seek(0)
        base64_image = base64.b64encode(image_data.read()).decode('utf-8')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analysis_settings = get_user_analysis_settings(user_id)
        quality = analysis_settings["quality"]
        max_tokens = config.ANALYSIS_QUALITY_SETTINGS[quality]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        payload = {
            "model": config.IMAGE_ANALYSIS_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/{image_format};base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            "max_tokens": max_tokens
        }
        
        logging.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession() as session:
            async with session.post("https://text.pollinations.ai/openai", json=payload, timeout=300) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status} - {error_text}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return
                
                result = await response.json()
                analysis = result['choices'][0]['message']['content']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_entry = {
                    "type": "analysis",
                    "prompt": "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ",
                    "timestamp": datetime.now().isoformat()
                }
                user_history.setdefault(user_id, []).append(user_entry)
                
                assistant_entry = {
                    "type": "analysis",
                    "response": analysis,
                    "quality": quality,
                    "timestamp": datetime.now().isoformat()
                }
                user_history[user_id].append(assistant_entry)
                save_users()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n{analysis}")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_analysis_states[user_id] = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.photo or (message.document and message.document.mime_type.startswith('image/')))
async def handle_unsolicited_image(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if user_states.get(user_id) == "waiting_for_image_description":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–∏ –º—ã –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if user_analysis_states.get(user_id) == "waiting_for_image_analysis":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="suggest_analyze")],
        [InlineKeyboardButton(text="üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="suggest_generate")]
    ])
    
    await message.answer(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
@dp.callback_query(lambda query: query.data == "suggest_analyze")
async def handle_suggest_analyze(callback: CallbackQuery):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, —è –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/analyze`.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
@dp.callback_query(lambda query: query.data == "suggest_generate")
async def handle_suggest_generate(callback: CallbackQuery):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/image`.")
    await callback.answer()


###########################################################
####### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ Polinations #######
# –ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
@dp.message(Command("generateaudio"))
async def cmd_generate_audio(message: Message):
    user_id = message.from_user.id
    reply = message.reply_to_message
    
    if not reply or not reply.text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/generateaudio`")
        return
    
    await message.answer("üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:", reply_markup=voice_selection_keyboard())
    user_states[user_id] = {
        "action": "generating_audio",
        "text": reply.text,
        "message_id": reply.message_id
    }

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tts
@dp.message(Command("tts"))
async def cmd_tts(message: Message):
    user_id = message.from_user.id
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/tts`")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_states[user_id] = {
        "action": "tts",
        "text": message.reply_to_message.text
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
    await message.answer("üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:", reply_markup=voice_selection_keyboard())

def voice_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=voice, callback_data=f"tts_voice_{voice}") for voice in config.SUPPORTED_VOICES],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="tts_voice_default")]
    ])

@dp.callback_query(lambda query: query.data.startswith("tts_voice_"))
async def handle_tts_voice(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states.get(user_id)
    
    if not state or state["action"] != "tts":
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ TTS")
        return
    
    voice = callback.data.split("_")[2]
    if voice == "default":
        voice = config.DEFAULT_VOICE
    
    text = state["text"]
    await callback.message.edit_text(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –≥–æ–ª–æ—Å–æ–º: {voice}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ (GET –∏–ª–∏ POST)
        if len(text) > 4096:
            audio_binary = await generate_audio_post(text, voice)
        else:
            audio_binary = await generate_audio_get(text, voice)
        
        input_file = BufferedInputFile(audio_binary, filename='tts.mp3')
        await callback.message.answer_audio(input_file, caption=f"üéôÔ∏è –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –≥–æ–ª–æ—Å–æ–º: {voice}")
        await callback.message.delete()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {str(e)}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    
    finally:
        user_states.pop(user_id, None)

@dp.callback_query(lambda query: query.data.startswith("voice_"))
async def handle_voice_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states.get(user_id)
    
    if not state or state.get("action") != "generating_audio":
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        return
    
    voice = callback.data.split("_")[1]
    
    if voice == "cancel":
        await callback.message.delete()
        user_states.pop(user_id, None)
        return
    
    text = state.get("text", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(text) > 4096:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST-–º–µ—Ç–æ–¥ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        await generate_audio_post(user_id, text, voice, callback)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GET-–º–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        await generate_audio_get(user_id, text, voice, callback)

async def generate_audio_get(user_id, text, voice, callback):
    try:
        encoded_text = urllib.parse.quote(text)
        payload = {
            "url": f"https://text.pollinations.ai/ {encoded_text}?model={config.TTS_MODEL}&voice={voice}"
        }
        
        audio_data = await generate_audio_with_retry(payload, method="GET")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_audio_history(user_id, text, voice, "GET")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        input_file = BufferedInputFile(audio_data, filename='generated_audio.mp3')
        await callback.message.answer_audio(input_file, caption=f"üéôÔ∏è –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –≥–æ–ª–æ—Å–æ–º: {voice}")
        await callback.message.delete()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GET: {str(e)}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ GET (–∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã)
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def generate_audio_get(text, voice):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å"""
    encoded_text = urllib.parse.quote(text)
    url = f"https://text.pollinations.ai/ {encoded_text}"
    params = {
        "model": config.TTS_MODEL,
        "voice": voice
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params, timeout=300) as response:
            if response.status == 200 and 'audio/mpeg' in response.headers.get('Content-Type', ''):
                return await response.read()
            error_text = await response.text()
            raise Exception(f"–û—à–∏–±–∫–∞ TTS (GET): {response.status} - {error_text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ POST (–¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def generate_audio_post(text, voice):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å"""
    payload = {
        "model": config.TTS_MODEL,
        "messages": [{"role": "user", "content": text}],
        "voice": voice
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post("https://text.pollinations.ai/openai ", json=payload, timeout=300) as response:
            if response.status != 200:
                error_text = await response.text()
                raise Exception(f"–û—à–∏–±–∫–∞ TTS (POST): {response.status} - {error_text}")
            
            result = await response.json()
            try:
                return base64.b64decode(result['choices'][0]['message']['audio']['data'])
            except (KeyError, IndexError, base64.binascii.Error) as e:
                raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

def save_audio_history(user_id, text, voice, method):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    entry = {
        "type": "audio",
        "prompt": text[:100],  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        "voice": voice,
        "method": method,
        "timestamp": datetime.now().isoformat()
    }
    user_history.setdefault(user_id, []).append(entry)
    save_users()

def split_text_into_chunks(text, max_length=4096):
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    words = text.split()
    chunks = []
    current_chunk = ""
    
    for word in words:
        if len(current_chunk) + len(word) + 1 <= max_length:
            current_chunk += " " + word
        else:
            chunks.append(current_chunk.strip())
            current_chunk = word
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, max=10))
async def generate_audio_with_retry(payload, method="POST"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    async with aiohttp.ClientSession() as session:
        if method == "GET":
            async with session.get(payload["url"], timeout=300) as response:
                if response.status == 200:
                    return await response.read()
                error_text = await response.text()
                raise Exception(f"–û—à–∏–±–∫–∞ API: {error_text}")
        else:
            async with session.post("https://text.pollinations.ai/openai", json=payload, timeout=300) as response:
                if response.status == 200:
                    return await response.json()
                error_text = await response.text()
                raise Exception(f"–û—à–∏–±–∫–∞ API: {error_text}")


###########################################################
##### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ Polinations ##### 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transcribe
@dp.message(Command("transcribe"))
async def cmd_transcribe(message: Message):
    user_id = message.from_user.id
    await message.answer("üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    user_transcribe_states[user_id] = "waiting_for_audio_transcribe"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
@dp.message(lambda message: message.audio or message.voice or message.document and message.document.mime_type.startswith('audio/'))
async def handle_audio_transcribe(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    if user_transcribe_states.get(user_id) != "waiting_for_audio_transcribe":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
    
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        audio_file = message.audio or message.voice or message.document
        file_info = await bot.get_file(audio_file.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.gettempdir()
        temp_input_path = os.path.join(temp_dir, f"{file_info.file_id}.{file_path.split('.')[-1]}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, temp_input_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        file_extension = temp_input_path.split('.')[-1].lower()
        if file_extension not in config.SUPPORTED_AUDIO_FORMATS:
            await message.answer(f"‚ùå –§–æ—Ä–º–∞—Ç {file_extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {', '.join(config.SUPPORTED_AUDIO_FORMATS)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        file_size = os.path.getsize(temp_input_path)
        if file_size > config.MAX_AUDIO_SIZE:
            await message.answer("‚è≥ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É—é —Å–∂–∞—Ç—å...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
            mp3_path = os.path.join(temp_dir, f"{file_info.file_id}.mp3")
            
            if not convert_to_mp3(temp_input_path, mp3_path):
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ MP3")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            mp3_size = os.path.getsize(mp3_path)
            if mp3_size > config.MAX_AUDIO_SIZE:
                await message.answer("‚è≥ –§–∞–π–ª –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                chunks = split_audio(mp3_path)
                if not chunks:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏")
                    return
                
                full_transcription = ""
                progress_msg = await message.answer("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–µ–π —Ñ–∞–π–ª–∞:")
                
                for i, chunk_path in enumerate(chunks):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    await progress_msg.edit_text(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}")
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º —á–∞—Å—Ç—å –≤ base64
                    with open(chunk_path, "rb") as f:
                        encoded_audio = base64.b64encode(f.read()).decode('utf-8')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                    payload = {
                        "model": config.TRANSCRIBE_MODEL,
                        "messages": [
                            {
                                "role": "user",
                                "content": [
                                    {"type": "text", "text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ä–µ—á—å –∏–∑ —ç—Ç–æ–π —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞:"},
                                    {
                                        "type": "input_audio",
                                        "input_audio": {
                                            "data": encoded_audio,
                                            "format": "mp3"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                    
                    try:
                        result = await transcribe_with_retry(payload)
                        transcription = result['choices'][0]['message']['content']
                        full_transcription += f"–ß–∞—Å—Ç—å {i+1}:\n{transcription}\n\n"
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞—Å—Ç–∏ {i+1}: {str(e)}")
                        full_transcription += f"–ß–∞—Å—Ç—å {i+1}: –û–®–ò–ë–ö–ê - {str(e)}\n\n"
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await progress_msg.delete()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_entry = {
                    "type": "transcribe",
                    "prompt": "–†–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ä–µ—á—å –∏–∑ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏)",
                    "timestamp": datetime.now().isoformat()
                }
                user_history.setdefault(user_id, []).append(user_entry)
                
                assistant_entry = {
                    "type": "transcribe",
                    "response": full_transcription,
                    "timestamp": datetime.now().isoformat()
                }
                user_history[user_id].append(assistant_entry)
                save_users()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await message.answer(f"üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Ñ–∞–π–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏):\n\n{full_transcription}")
                return
        
        else:
            # –§–∞–π–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            with open(temp_input_path, "rb") as f:
                encoded_audio = base64.b64encode(f.read()).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        payload = {
            "model": config.TRANSCRIBE_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ä–µ—á—å –∏–∑ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:"},
                        {
                            "type": "input_audio",
                            "input_audio": {
                                "data": encoded_audio,
                                "format": file_extension
                            }
                        }
                    ]
                }
            ]
        }
        
        logging.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –æ—Ç {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await transcribe_with_retry(payload)
        transcription = result['choices'][0]['message']['content']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_entry = {
            "type": "transcribe",
            "prompt": "–†–∞—Å–ø–æ–∑–Ω–∞–π—Ç–µ —Ä–µ—á—å –∏–∑ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞",
            "timestamp": datetime.now().isoformat()
        }
        user_history.setdefault(user_id, []).append(user_entry)
        
        assistant_entry = {
            "type": "transcribe",
            "response": transcription,
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(assistant_entry)
        save_users()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(f"üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:\n\n{transcription}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 512 MB\n"
            "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç MP3\n"
            "3. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã"
        )
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for root, _, files in os.walk(temp_dir):
            for file in files:
                if file.startswith(f"{file_info.file_id}."):
                    try:
                        os.remove(os.path.join(root, file))
                    except:
                        pass
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_transcribe_states[user_id] = None

###########################################################
########### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ########### 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
async def get_existing_jobs(api_key):
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    async with httpx.AsyncClient() as client:
        response = await client.get("https://asr.api.speechmatics.com/v2/jobs/", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ job_id
async def get_transcript(job_id, api_key):
    headers = {
        "Authorization": f"Bearer {api_key}"
    }
    async with httpx.AsyncClient() as client:
        response = await client.get(f"https://asr.api.speechmatics.com/v2/jobs/{job_id}/transcript?format=txt", headers=headers)
        if response.status_code == 200:
            return response.text
        else:
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
async def handle_audio_file(message: Message):
    user_id = message.from_user.id
    audio_file = message.audio or message.voice or message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if audio_file.mime_type not in ["audio/aac", "audio/amr", "audio/flac", "audio/m4a", "audio/mpeg", "audio/mp4", "audio/ogg", "audio/wav"]:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: aac, amr, flac, m4a, mp3, mp4, mpeg, ogg, wav, –æ–±—ä–µ–º–æ–º –¥–æ 512Mb.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_info = await bot.get_file(audio_file.file_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É temp
    file_path = os.path.join('temp', f"{audio_file.file_id}.audio")
    await bot.download_file(file_info.file_path, destination=file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    if not os.path.exists(file_path):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
    checking_message = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", disable_notification=True)

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    existing_jobs = await get_existing_jobs(SPEECHMATICS_API)

    if existing_jobs:
        for job in existing_jobs.get('jobs', []):
            if job['data_name'] == os.path.basename(file_path):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
                await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", disable_notification=True)
                transcript = await get_transcript(job['id'], SPEECHMATICS_API)  # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                if transcript:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
                    temp_file_path = os.path.join('temp', f"{job['id']}.txt")
                    with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                        temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                    audio_file = FSInputFile(temp_file_path)
                    await bot.send_document(user_id, audio_file, disable_notification=True)
                else:
                    await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.", disable_notification=True)
                return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    await bot.delete_message(chat_id=message.chat.id, message_id=checking_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", disable_notification=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    try:
        with BatchClient(SPEECHMATICS_API) as client:
            job_id = client.submit_job(file_path, BatchTranscriptionConfig(TRANSCRIPTION_LANGUAGE))
            await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", disable_notification=True)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            asyncio.create_task(check_job_status(job_id, user_id))

    except Exception as e:
        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", disable_notification=True)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def check_job_status(job_id, user_id):
    while True:
        await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        transcript = await get_transcript(job_id, SPEECHMATICS_API)
        if transcript:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
            try:
                temp_file_path = os.path.join('temp', f"{job_id}.txt")
                with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                    temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                audio_file = FSInputFile(temp_file_path)
                sent_message = await bot.send_document(user_id, audio_file, disable_notification=True)
                await bot.delete_message(chat_id=user_id, message_id=sent_message.message_id - 1)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            except Exception as e:
                await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", disable_notification=True)
            break
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
            continue

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
async def handle_existing_jobs(user_id, file_path):
    existing_jobs = await get_existing_jobs(SPEECHMATICS_API)

    if existing_jobs:
        for job in existing_jobs.get('jobs', []):
            if job['data_name'] == os.path.basename(file_path):  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                sent_message = await bot.send_message(user_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", disable_notification=True)
                transcript = await get_transcript(job['id'], SPEECHMATICS_API)  # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é

                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp
                try:
                    temp_file_path = os.path.join('temp', f"{job['id']}.txt")
                    with open(temp_file_path, 'w', encoding='utf-8') as temp_file:
                        temp_file.write(transcript)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSInputFile
                    audio_file = FSInputFile(temp_file_path)
                    await bot.send_document(user_id, audio_file, disable_notification=True)
                    await bot.delete_message(chat_id=user_id, message_id=sent_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
                except Exception as e:
                    await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}", disable_notification=True)
                break

#####################################################
########### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ############
@dp.message(Command("translatetoeng"))
async def cmd_translate(message: Message):
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/translatetoeng`")
        return
    
    original_text = message.reply_to_message.text
    translated_text = await translate_to_english(original_text)
    
    await message.answer(
        f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        f"{translated_text}"
    )

@dp.message(Command("translatetoru"))
async def cmd_translate(message: Message):
    if not message.reply_to_message or not message.reply_to_message.text:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/translatetoru`")
        return
    
    original_text = message.reply_to_message.text
    translated_text = await translate_to_russian(original_text)
    
    await message.answer(
        f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        f"{translated_text}"
    )

#####################################################
# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ #
async def is_waiting_for_audio_file(message: Message):
    return user_states.get(message.from_user.id) == "waiting_for_audio_file" and \
           (message.content_type == 'audio' or message.content_type == 'voice' or message.content_type == 'document')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
dp.message(is_waiting_for_audio_file)(handle_audio_file)

################################################
########### –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(lambda message: message.reply_to_message and is_admin(message.reply_to_message.from_user.id))
async def handle_admin_reply(message: Message):
    admin_id = message.reply_to_message.from_user.id
    user_id = message.from_user.id
    user_message = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(admin_id, f"üë§ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{user_message}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@dp.message(lambda message: message.text is not None and not (message.reply_to_message and is_admin(message.reply_to_message.from_user.id)))
async def handle_message(message: Message):
    global current_provider
    user_id = message.from_user.id
    user_input = message.text
    
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
        api_messages = [
            {"role": msg["role"], "content": msg["content"]}
            for msg in user_history.get(user_id, [])
            if msg.get("type") == "text"  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            and "role" in msg
            and "content" in msg
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_entry = {
            "type": "text",
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now().isoformat()
        }
        api_messages.append({"role": "user", "content": user_input})
        
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        
        provider_class = getattr(g4f.Provider, current_provider)
        response = await g4f.ChatCompletion.create_async(
            model=g4f.models.default,
            messages=api_messages,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            provider=provider_class(),
            api_key=API_DeepSeek
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history.setdefault(user_id, []).append(user_entry)
        assistant_entry = {
            "type": "text",
            "role": "assistant",
            "content": remove_html_tags(response),
            "timestamp": datetime.now().isoformat()
        }
        user_history[user_id].append(assistant_entry)
        save_users()
        
        formatted_response = format_response(response)
        await message.answer(formatted_response, parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI: {str(e)}")
        current_provider = AVAILABLE_PROVIDERS[0]
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n"
            f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ {current_provider}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.audio or message.voice or message.document and message.document.mime_type.startswith('audio/'))
async def handle_unsolicited_audio(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    if user_transcribe_states.get(user_id) == "waiting_for_audio_transcribe":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé§ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å", callback_data="suggest_transcribe")],
        [InlineKeyboardButton(text="üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="suggest_generate")]
    ])
    
    await message.answer(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –•–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å"
@dp.callback_query(lambda query: query.data == "suggest_transcribe")
async def handle_suggest_transcribe(callback: CallbackQuery):
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, —è –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ —ç—Ç–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/transcribe`.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.content_type in ['photo', 'document'])
async def handle_media(message: Message):
    if message.photo:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
        if user_analysis_states.get(message.from_user.id) == "waiting_for_image_analysis":
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handle_image_analysis
        
        await message.answer("üñº –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /image")
    elif message.document:
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
        if message.document.mime_type.startswith('image/'):
            if user_analysis_states.get(message.from_user.id) == "waiting_for_image_analysis":
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handle_image_analysis
            else:
                await message.answer("üñº –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze")
        else:
            await message.answer("‚ùå –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º —Ñ–∞–π–ª–æ–≤")

######################################################
########### –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ###########

async def wait_for_telegram_api():
    while True:
        if await check_telegram_api_availability():
            logging.info("Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        logging.error("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
        await asyncio.sleep(10)

async def auto_save_task():
    while True:
        await asyncio.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        save_users()
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    asyncio.create_task(auto_save_task())
    await wait_for_telegram_api()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        load_users()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)
        print("\n–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        save_users()
        print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")