import re
import g4f
import logging
import config
from aiogram import F, Router
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, BufferedInputFile, FSInputFile, BotCommand, BotCommandScopeChat, TelegramObject
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from providers.fully_working import AVAILABLE_PROVIDERS
from datetime import datetime
from tenacity import retry, stop_after_attempt, wait_exponential
from langdetect import detect
from utils.helpers import auto_detect_language, get_user_settings, save_users
from database import (  save_users, load_users, save_blocked_users,
                        user_history, user_settings, user_info,
                        image_requests, last_image_requests, used_questions,
                        user_states, admin_states, blocked_users,
                        user_analysis_states, user_analysis_settings,
                        user_transcribe_states, user_quiz_data, group_quiz_data )
from utils.helpers import get_user_settings, translate_to_english
from services.tgapi import bot

router = Router()

logger = logging.getLogger(__name__)

@router.message(Command("next"))
async def cmd_next(message: Message):
    chat_type = message.chat.type
    
    if chat_type == "private":
        user_id = message.from_user.id
        if user_id not in user_quiz_data:
            return
        await ask_next_question(message, user_id)
    else:
        chat_id = message.chat.id
        if chat_id not in group_quiz_data:
            return
        quiz_data = group_quiz_data[chat_id]
        quiz_data["current_question"] += 1
        await send_group_question(message, chat_id)

@router.message(Command("quizprovider"))
async def cmd_quiz_provider(message: Message):
    user_id = message.from_user.id
    current = config.DEFAULT_QVIZ_PROVIDER  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üîÑ {provider}{' ‚úÖ' if provider == current else ''}", 
            callback_data=f"quiz_provider_{provider}"
        )] 
        for provider in AVAILABLE_PROVIDERS
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω:", reply_markup=keyboard)

@router.callback_query(lambda query: query.data == "finish_quiz")
async def finish_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    quiz_data = user_quiz_data.get(user_id)
    
    if not quiz_data:
        await callback.message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {str(e)}")
    
    total_questions = quiz_data["current_question"]
    score = quiz_data["score"]
    
    rating = "–ù–æ–≤–∏—á–æ–∫"
    if score >= total_questions * 0.8:
        rating = "–ú–∞—Å—Ç–µ—Ä"
    elif score >= total_questions * 0.6:
        rating = "–≠–∫—Å–ø–µ—Ä—Ç"
    elif score >= total_questions * 0.4:
        rating = "–ó–Ω–∞—Ç–æ–∫"
    
    result_text = f"üõë –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score}/{total_questions}\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {rating}"
    await callback.message.answer(result_text)
    
    user_quiz_data.pop(user_id, None)

@router.callback_query(lambda query: query.data.startswith("quiz_provider_"))
async def handle_quiz_provider_selection(query: CallbackQuery):
    provider_name = query.data.split("_", 2)[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    config.DEFAULT_QVIZ_PROVIDER = provider_name  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    await query.message.edit_text(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {provider_name}")
    await query.answer()

def get_unique_question(user_id: int, questions: list) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in used_questions:
        used_questions[user_id] = set()
    
    unique = []
    for q in questions:
        question_hash = hash(q["question"])
        if question_hash not in used_questions[user_id]:
            unique.append(q)
            used_questions[user_id].add(question_hash)
    
    return unique

async def send_group_question(message: Message, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    quiz_data = group_quiz_data[chat_id]
    
    if quiz_data["current_question"] >= len(quiz_data["questions"]):
        await show_group_quiz_results(message, chat_id)
        return
    
    current_q = quiz_data["questions"][quiz_data["current_question"]]
    participants = quiz_data["participants"]
    current_player = participants[quiz_data["current_turn"] % len(participants)]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{key}) {value}", callback_data=f"group_quiz_answer_{key}_{chat_id}")]
        for key, value in current_q["options"].items()
    ])
    
    await message.bot.send_message(
        chat_id,
        f"üë• –í–æ–ø—Ä–æ—Å {quiz_data['current_question'] + 1}:\n{current_q['question']}\n\n"
        f"–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞: {current_player} (ID: {current_player})"
    )
    await message.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=keyboard)

@router.message(Command("stopquiz"))
async def cmd_stop_quiz(message: Message):
    user_id = message.from_user.id
    if user_id in user_quiz_data:
        user_quiz_data.pop(user_id)
        await message.answer("üõë –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")

@router.message(Command("quiz"))
async def cmd_quiz(message: Message):
    chat_type = message.chat.type
    
    if chat_type == "private":
        # –õ–∏—á–Ω—ã–π —á–∞—Ç ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ
        await start_private_quiz(message)
    else:
        # –ì—Ä—É–ø–ø–∞ ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –≤—Å–µ—Ö
        await start_group_quiz(message)

async def start_private_quiz(message: Message):
    user_id = message.from_user.id
    
    if user_states.get(user_id) == "in_quiz":
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!")
        return
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {
        1: "–ò—Å—Ç–æ—Ä–∏—è",
        2: "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        3: "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        4: "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        5: "–°–ø–æ—Ä—Ç",
        6: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        7: "–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã",
        8: "–ú—É–∑—ã–∫–∞",
        9: "–†–∞–∑–Ω–æ–µ"
    }
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"quiz_category_{i}")]
        for i, cat in categories.items()
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    user_states[user_id] = "quiz_category_selection"

async def start_group_quiz(message: Message):
    chat_id = message.chat.id
    
    if chat_id in group_quiz_data:
        await message.answer("‚ö†Ô∏è –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    group_quiz_data[chat_id] = {
        "participants": [],  # –°–ø–∏—Å–æ–∫ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        "current_question": 0,
        "score": {},          # –°—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        "current_turn": 0,    # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        "questions": []       # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    }
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_quiz")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quiz")]
    ])
    await message.answer("üéÆ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã! –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ.", reply_markup=keyboard)

@router.callback_query(lambda query: query.data == "join_quiz")
async def join_group_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    if chat_id not in group_quiz_data:
        await callback.message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞.")
        return
    
    participants = group_quiz_data[chat_id]["participants"]
    
    if user_id in participants:
        await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!", show_alert=True)
        return
    
    participants.append(user_id)
    group_quiz_data[chat_id]["score"][user_id] = 0
    await callback.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!", show_alert=True)

@router.callback_query(lambda query: query.data.startswith("group_quiz_answer_"))
async def handle_group_quiz_answer(callback: CallbackQuery):
    chat_id = int(callback.data.split("_")[-1])
    answer = callback.data.split("_")[2].upper()
    user_id = callback.from_user.id
    
    quiz_data = group_quiz_data.get(chat_id)
    if not quiz_data or user_id not in quiz_data["participants"]:
        await callback.message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.")
        return
    
    current_turn = quiz_data["current_turn"]
    participants = quiz_data["participants"]
    
    if user_id != participants[current_turn % len(participants)]:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—á–∞—Ç—å.", show_alert=True)
        return
    
    current_q = quiz_data["questions"][quiz_data["current_question"]]
    await callback.message.edit_reply_markup(reply_markup=None)
    
    if answer == current_q["correct"]:
        quiz_data["score"][user_id] += 1
        await callback.message.bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await callback.message.bot.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['correct']}")
    
    quiz_data["current_turn"] += 1
    quiz_data["current_question"] += 1
    await send_group_question(callback.message, chat_id)

async def show_group_quiz_results(message: Message, chat_id: int):
    quiz_data = group_quiz_data.get(chat_id)
    if not quiz_data:
        await message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    results = sorted(
        [(user, score) for user, score in quiz_data["score"].items()],
        key=lambda x: x[1],
        reverse=True
    )
    
    result_text = "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    for user_id, score in results[:5]:
        result_text += f"{user_id}: {score} –æ—á–∫–æ–≤\n"
    
    await message.answer(result_text)
    group_quiz_data.pop(chat_id, None)


@router.callback_query(lambda query: query.data.startswith("quiz_category_"))
async def handle_quiz_category(callback: CallbackQuery):
    user_id = callback.from_user.id
    category_number = int(callback.data.split("_")[2])
    categories = {
        1: "–ò—Å—Ç–æ—Ä–∏—è",
        2: "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        3: "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
        4: "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
        5: "–°–ø–æ—Ä—Ç",
        6: "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
        7: "–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã",
        8: "–ú—É–∑—ã–∫–∞",
        9: "–†–∞–∑–Ω–æ–µ"
    }
    selected_category = categories.get(category_number, "–†–∞–∑–Ω–æ–µ")
    
    user_quiz_data[user_id] = {
        "category": selected_category,
        "current_question": 0,
        "score": 0,
        "questions": [],
        "awaiting_answer": False
    }
    
    await callback.message.edit_text(f"üß† –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?")
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å", callback_data="start_quiz")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_quiz")]
    ]))


@router.callback_query(lambda query: query.data == "start_quiz")
async def start_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_quiz_data:
        await callback.message.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    
    user_quiz_data[user_id]["current_question"] = 0
    await callback.message.delete()
    await ask_next_question(callback.message, user_id)


def parse_quiz_questions(raw_text: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞"""
    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞: {raw_text}")
    lines = [line.strip() for line in raw_text.strip().split('\n') if line.strip()]
    questions = []
    current_question = None
    
    for line in lines:
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "–í–æ–ø—Ä–æ—Å:" –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º
        if line.startswith("–í–æ–ø—Ä–æ—Å:") or re.match(r'^\d+\.', line):
            if current_question:
                questions.append(current_question)
            question_text = line.split(":", 1)[1].strip() if ":" in line else line.split(".", 1)[1].strip()
            current_question = {
                "question": question_text,
                "options": {},
                "correct": ""
            }
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º...?")
        elif "?" in line and not line.startswith(('A)', 'B)', 'C)', 'D)')) and len(line) > 10:
            if current_question:
                questions.append(current_question)
            current_question = {
                "question": line,
                "options": {},
                "correct": ""
            }
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        elif re.match(r'^[A-D]\)', line):
            if not current_question:
                current_question = {
                    "question": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                    "options": {},
                    "correct": ""
                }
            key = line[0]
            value = line[3:].strip()
            current_question["options"][key] = value
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        elif line.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"):
            if current_question:
                correct = line.split(":")[-1].strip().upper()
                current_question["correct"] = correct
                questions.append(current_question)
                current_question = None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if current_question:
        current_question["options"] = {k: v for k, v in current_question["options"].items() if v}
        if len(current_question["options"]) >= 4:
            questions.append(current_question)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    if not questions or any(len(q["options"]) < 4 for q in questions):
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞")
        return []
    
    return questions

async def ask_next_question(message: Message, user_id: int):
    quiz_data = user_quiz_data.get(user_id)
    
    if not quiz_data:
        quiz_data = {
            "category": "–†–∞–∑–Ω–æ–µ",
            "current_question": 0,
            "score": 0,
            "questions": [],
            "awaiting_answer": False
        }
        user_quiz_data[user_id] = quiz_data

    if quiz_data["current_question"] >= len(quiz_data["questions"]):
        new_question = await generate_quiz_questions(quiz_data["category"])
        if not new_question:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return
        quiz_data["questions"].extend(new_question)

    current_q = quiz_data["questions"][quiz_data["current_question"]]
    quiz_data["awaiting_answer"] = True

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard_buttons = [
        [InlineKeyboardButton(text=f"{key}) {value}", callback_data=f"quiz_answer_{key}")]
        for key, value in current_q["options"].items()
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
    keyboard_buttons.append([
        InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_quiz")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∫–Ω–æ–ø–∫–∏
    question_message = await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å {quiz_data['current_question'] + 1}:\n{current_q['question']}")
    answer_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    quiz_data["last_question_message_id"] = answer_message.message_id
    quiz_data["last_question_message_chat_id"] = answer_message.chat.id

@router.callback_query(lambda query: query.data.startswith("quiz_answer_"))
async def handle_quiz_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    answer = callback.data.split("_")[-1].upper()
    quiz_data = user_quiz_data.get(user_id)

    if not quiz_data:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    current_q = quiz_data["questions"][quiz_data["current_question"]]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        chat_id = quiz_data.get("last_question_message_chat_id")
        msg_id = quiz_data.get("last_question_message_id")
        if chat_id and msg_id:
            await bot.delete_message(chat_id, msg_id)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    correct_answer = current_q["options"].get(current_q["correct"], "")
    
    if answer == current_q["correct"]:
        quiz_data["score"] += 1
        await callback.message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, —ç—Ç–æ: {correct_answer}")
    else:
        await callback.message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    quiz_data["current_question"] += 1
    await ask_next_question(callback.message, user_id)

@router.callback_query(lambda query: query.data == "next_question")
async def next_question_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    await ask_next_question(callback.message, user_id)


async def show_quiz_results(message: Message, user_id: int):
    quiz_data = user_quiz_data.get(user_id)
    if not quiz_data:
        await message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    total_questions = len(quiz_data["questions"])
    score = quiz_data["score"]
    rating = "–ù–æ–≤–∏—á–æ–∫"
    
    if score >= total_questions * 0.8:
        rating = "–ú–∞—Å—Ç–µ—Ä"
    elif score >= total_questions * 0.6:
        rating = "–≠–∫—Å–ø–µ—Ä—Ç"
    elif score >= total_questions * 0.4:
        rating = "–ó–Ω–∞—Ç–æ–∫"
    
    result_text = f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score}/{total_questions}\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {rating}"
    await message.answer(result_text)
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_quiz_data.pop(user_id, None)


@router.callback_query(lambda query: query.data == "answer_quiz")
async def answer_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (A, B, C –∏–ª–∏ D):")


@router.callback_query(lambda query: query.data == "cancel_quiz")
async def cancel_quiz(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_quiz_data:
        user_quiz_data.pop(user_id)
    await callback.message.edit_text("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

from tenacity import retry, stop_after_attempt, wait_exponential
from langdetect import detect

async def generate_quiz_questions(category: str, count: int = 1):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    prompt = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ {count} –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{category}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    –í–æ–ø—Ä–æ—Å: [–í–æ–ø—Ä–æ—Å]
    A) [–í–∞—Ä–∏–∞–Ω—Ç 1]
    B) [–í–∞—Ä–∏–∞–Ω—Ç 2]
    C) [–í–∞—Ä–∏–∞–Ω—Ç 3]
    D) [–í–∞—Ä–∏–∞–Ω—Ç 4]
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–ë—É–∫–≤–∞]

    –ü—Ä–∏–º–µ—Ä:
    –í–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –ö–≤–µ–Ω—Ç–∏–Ω–∞ –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ –ø–æ–ª—É—á–∏–ª ¬´–û—Å–∫–∞—Ä¬ª –∑–∞ –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π?
    A) –£–±–∏—Ç—å –ë–∏–ª–ª–∞
    B) Django –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–π
    C) Pulp Fiction
    D) –ë–µ—à–µ–Ω—ã–µ –ø—Å—ã
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: B

    –í–ê–ñ–ù–û: 
    - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    - –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    try:
        import config
        provider_class = getattr(g4f.Provider, config.DEFAULT_QVIZ_PROVIDER)
        
        raw_questions = await g4f.ChatCompletion.create_async(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            provider=provider_class
        )
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {raw_questions}")
        return parse_quiz_questions(raw_questions)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        return []