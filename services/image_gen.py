# services/image_gen.py
import aiohttp
import random
import logging
import urllib.parse
from aiogram import F, Router
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, BufferedInputFile, FSInputFile, BotCommand, BotCommandScopeChat, TelegramObject
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from utils.helpers import get_user_settings, save_users
from database import (
                        save_users, load_users, save_blocked_users,
                        user_history, user_settings, user_info,
                        image_requests, last_image_requests,
                        user_states, admin_states, blocked_users,
                        user_analysis_states, user_analysis_settings,
                        user_transcribe_states )
from utils.helpers import get_user_settings, translate_to_english
from services.tgapi import bot

router = Router()

logger = logging.getLogger(__name__)


####################################################
########### –í—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ###########

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /imagesettings
@router.message(Command("imagesettings"))
async def cmd_imagesettings(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ú–æ–¥–µ–ª—å: {settings['model']}", callback_data="setting_model")],
        [
            InlineKeyboardButton(text="–ö–≤–∞–¥—Ä–∞—Ç (1:1)", callback_data="setting_size_square"),
            InlineKeyboardButton(text="–ü–æ—Ä—Ç—Ä–µ—Ç (1:2)", callback_data="setting_size_portrait"),
        ],
        [
            InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂ (2:1)", callback_data="setting_size_landscape"),
            InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting_reset"),
        ]
    ])

    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(lambda query: query.data.startswith("setting_"))
async def handle_settings_selection(query: CallbackQuery):
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    action = query.data

    if action == "setting_model":
        # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="flux", callback_data="model_flux")],
            [InlineKeyboardButton(text="flux-anime", callback_data="model_flux-anime")],
            [InlineKeyboardButton(text="flux-cablyai", callback_data="model_flux-cablyai")],
        ])
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
        await query.answer()

    elif action == "setting_size_square":
        settings["width"] = 1920
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ö–≤–∞–¥—Ä–∞—Ç (1920x1920)")
        await query.answer()

    elif action == "setting_size_portrait":
        settings["width"] = 1080
        settings["height"] = 1920
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–æ—Ä—Ç—Ä–µ—Ç (1080x1920)")
        await query.answer()

    elif action == "setting_size_landscape":
        settings["width"] = 1920
        settings["height"] = 1080
        await query.message.edit_text("‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –ü–µ–π–∑–∞–∂ (1920x1080)")
        await query.answer()

    elif action == "setting_reset":
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
        await query.message.edit_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        await query.answer()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@router.callback_query(lambda query: query.data.startswith("model_"))
async def handle_model_selection(query: CallbackQuery):
    user_id = query.from_user.id
    settings = get_user_settings(user_id)
    model_name = query.data.split("_", 1)[1]
    settings["model"] = model_name
    await query.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_name}")
    await query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    if user_id not in user_settings:
        user_settings[user_id] = {
            "model": "flux",
            "width": 1080,
            "height": 1920
        }
    return user_settings[user_id]

class ImageState(StatesGroup):
    description = State()

##################################################
########### –ë–ª–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ###########
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(lambda message: message.text and user_states.get(message.from_user.id) == "waiting_for_image_description")
async def handle_image_description(message: Message):
    user_id = message.from_user.id
    settings = get_user_settings(user_id)

    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    user_history[user_id].append({
        "type": "image",
        "prompt": prompt,
        "model": settings["model"],
        "width": settings["width"],
        "height": settings["height"],
        "timestamp": datetime.now().isoformat()
    })
    save_users()
    image_requests[user_id].append(prompt)

    await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        width = settings["width"]
        height = settings["height"]
        seed = random.randint(10, 99999999)
        model = settings["model"]

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated_prompt = await translate_to_english(prompt)
        logging.info(f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {prompt} -> {translated_prompt}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        encoded_prompt = urllib.parse.quote(translated_prompt)  # ‚ùå –ë—ã–ª–æ: prompt
        params = {
            "width": width,
            "height": height,
            "seed": seed,
            "model": model,
            "nologo": "true"
        }
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
        
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=300) as response:
                if response.status == 200:
                    image_data = await response.read()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {await response.text()}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        sent_message = await message.answer_photo(
            photo=input_file,
            caption=f"üñº –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ last_image_requests
        last_image_requests[user_id] = {
            "prompt": prompt,
            "translated_prompt": translated_prompt,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "model": model,
            "width": width,
            "height": height
        }

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = None
        image_requests[user_id] = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.callback_query(lambda query: query.data.startswith("regenerate:"))
async def handle_regenerate(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id not in last_image_requests:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ last_image_requests
    request_data = last_image_requests[user_id]
    original_prompt = request_data["prompt"]
    translated_prompt = request_data.get("translated_prompt", await translate_to_english(original_prompt))  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    model = request_data["model"]
    width = request_data["width"]
    height = request_data["height"]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ seed
    new_seed = random.randint(10, 99999999)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    encoded_prompt = urllib.parse.quote(translated_prompt)  # ‚ùå –ë—ã–ª–æ: original_prompt
    params = {
        "width": width,
        "height": height,
        "seed": new_seed,
        "model": model,
        "nologo": "true"
    }
    image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
    
    logging.info(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(image_url, timeout=300) as response:
                if response.status == 200:
                    image_data = await response.read()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {await response.text()}")
                    await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", show_alert=True)
                    return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        input_file = BufferedInputFile(image_data, filename='image.jpg')
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await callback.message.answer_photo(
            photo=input_file,
            caption=f"üñº –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: '{original_prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}, Seed: {new_seed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ", callback_data=f"regenerate:{user_id}"),
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"accept:{user_id}")
                ]
            ])
        )
        
        await callback.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º last_image_requests —Å –Ω–æ–≤—ã–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        last_image_requests[user_id]["translated_prompt"] = await translate_to_english(original_prompt)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@router.callback_query(lambda query: query.data.startswith("accept:"))
async def handle_accept(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    
    if user_id in last_image_requests:
        del last_image_requests[user_id]
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –∫–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã.")
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è", show_alert=True)

async def generate_image(prompt: str, user_id: int) -> bytes:
    settings = get_user_settings(user_id)
    params = {
        "private": False,
        "enhance": True,
        "safe": True,
        "referrer": "MyTestBot",
        "nologo": True,
        "width": settings["width"],
        "height": settings["height"]
    }
    encoded_prompt = urllib.parse.quote(prompt)
    image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?{urllib.parse.urlencode(params)}"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url, timeout=300) as response:
            if response.status == 200:
                return await response.read()
            else:
                error_text = await response.text()
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status} - {error_text}")
                return None