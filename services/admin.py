# services/admin.py
import logging
import asyncio
from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, BufferedInputFile, FSInputFile, BotCommand, BotCommandScopeChat, TelegramObject
from services.tgapi import bot
from database import (
                        save_users, load_users, save_blocked_users,
                        user_history, user_settings, user_info,
                        image_requests, last_image_requests,
                        user_states, admin_states, blocked_users,
                        user_analysis_states, user_analysis_settings,
                        user_transcribe_states
                    )
from datetime import datetime
from config import ADMINS

router = Router()

def is_admin(user_id: int):
    return user_id in ADMINS

@router.message(Command("adminusers"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")]
    ])
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("admin_block_"))
async def block_user(query: CallbackQuery):
    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    user_id = int(query.data.split("_")[2])
    if is_admin(user_id):
        await query.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    blocked_users[str(user_id)] = datetime.now().isoformat()
    save_blocked_users()
    await query.message.edit_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


###################################################
########### –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ################




####################################################
################### –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ###################

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(lambda query: query.data == "admin_stats")
async def handle_admin_stats(query: CallbackQuery):
    try:
        stats_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        total_users = len(user_info)
        total_messages = sum(len(h) for h in user_history.values())
        total_blocked = len(blocked_users)
        total_transcriptions = sum(
            1 for entries in user_history.values() 
            for entry in entries 
            if entry.get("type") == "transcribe"
        )
        total_audio = sum(
            1 for entries in user_history.values() 
            for entry in entries 
            if entry.get("type") == "audio"
        )

        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        stats_text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_blocked}\n\n"
        stats_text += f"\nüé§ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π: {total_transcriptions}"
        stats_text += f"\nüéôÔ∏è –í—Å–µ–≥–æ –∞—É–¥–∏–æ: {total_audio}"
        stats_text += "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        active_users = sorted(
            [(uid, len(history)) for uid, history in user_history.items()],
            key=lambda x: x[1],
            reverse=True
        )[:5]  # –¢–æ–ø-5
        
        for i, (uid, count) in enumerate(active_users, 1):
            user_info_str = get_user_info_str(uid)
            stats_text += f"{i}. {user_info_str} - {count} —Å–æ–æ–±—â.\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
        ])
        
        await query.message.edit_text(stats_text, reply_markup=keyboard)
        await query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(lambda query: query.data == "admin_main_menu")
async def handle_admin_main_menu(query: CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
        ])
        
        await query.message.edit_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        await query.answer()
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {str(e)}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
@router.callback_query(lambda query: query.data == "admin_close")
async def handle_admin_close(query: CallbackQuery):
    await query.message.delete()
    await query.answer("üîí –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_timestamp(iso_timestamp):
    try:
        dt = datetime.fromisoformat(iso_timestamp)
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ —Ä–æ–ª–µ–π
def get_role_icon(role):
    return {
        'user': 'üë§',
        'assistant': 'ü§ñ'
    }.get(role, '‚ùì')

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info_str(user_id: int) -> str:
    if user_id in user_info:
        info = user_info.get(user_id, {})
        name = f"{info['first_name']} {info['last_name']}" if info.get('last_name') else info['first_name']
        username = f"(@{info['username']})" if info.get('username') else ""
        return f"{name} {username}" if name else f"ID: {user_id}"
    return f"ID: {user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /adminusers
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("adminusers"))
async def cmd_admin(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked_list")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])
    
    await message.answer(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda query: query.data == "admin_users_list")
async def handle_users_list(query: CallbackQuery):
    unique_users = {}
    for uid, info in user_info.items():
        unique_users[uid] = info
    
    if not unique_users:
        await query.answer("üìÇ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞")
        return
    
    sorted_users = sorted(unique_users.items(), key=lambda x: x[0])
    buttons = []
    for uid, info in sorted_users:
        user_text = f"üë§ {info['first_name']} {info['last_name'] or ''} (@{info['username'] or '–Ω–µ—Ç'})"
        buttons.append([InlineKeyboardButton(text=user_text, callback_data=f"admin_user_{uid}")])
    
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")])
    
    await query.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(lambda query: query.data.startswith("admin_message_"))
async def handle_admin_message(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    admin_states[admin_id] = {"action": "message", "target": user_id}
    
    await query.message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
@router.message(lambda message: is_admin(message.from_user.id) and message.from_user.id in admin_states)
async def handle_admin_messages(message: Message):
    admin_id = message.from_user.id
    state = admin_states.get(admin_id)
    
    if not state:
        return
    
    text = message.text
    action = state.get("action")
    target = state.get("target")
    
    try:
        if action == "message" and target:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_accepted_{admin_id}_{target}"),
                 InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ", callback_data=f"response_rejected_{admin_id}_{target}")]
            ])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info_str = get_user_info_str(target)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_message = await bot.send_message(
                chat_id=target,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=admin_id,
                text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_info_str}",
                reply_to_message_id=message.message_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            admin_states[admin_id] = {
                "action": "message",
                "target": target,
                "admin_msg_id": message.message_id,
                "user_info_str": user_info_str,
                "message_text": text
            }

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Admin error: {str(e)}")

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
@router.callback_query(lambda query: query.data.startswith("admin_user_"))
async def handle_admin_user_selection(query: CallbackQuery):
    try:
        admin_id = query.from_user.id
        if not is_admin(admin_id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_id = int(query.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        is_blocked = user_id in blocked_users
        status_text = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        action_buttons = []
        if is_blocked:
            action_buttons.append(
                InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_unblock_{user_id}")
            )
        else:
            if not is_admin(user_id):  # –ó–∞–ø—Ä–µ—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–¥–º–∏–Ω–æ–≤
                action_buttons.append(
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_block_{user_id}")
                )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}"),
                *action_buttons
            ],
            [
                InlineKeyboardButton(text="üì® –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_message_{user_id}")
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_users_list"),
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
            ]
        ])
        
        await query.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_user_info_str(user_id)}\n"
            f"ID: {user_id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=keyboard
        )
        await query.answer()
        
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏
@router.callback_query(lambda query: query.data.startswith("admin_history_"))
async def handle_admin_history(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    history = user_history.get(user_id, [])
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
    MAX_MESSAGE_LENGTH = 4000  
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n"
    valid_entries = 0
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏
    for entry in history:
        entry_type = entry.get("type", "unknown")
        
        if entry_type == "text":
            role = entry.get("role", "user")
            content = entry.get("content", "")
            timestamp = entry.get("timestamp", "")
            prefix = "üë§" if role == "user" else "ü§ñ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
            entry_text = f"{prefix} {role.capitalize()} ({timestamp}):\n{content}\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            if len(history_text) + len(entry_text) > MAX_MESSAGE_LENGTH:
                await query.message.answer(history_text)
                history_text = ""  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            
            history_text += entry_text
            valid_entries += 1
        
        elif entry_type == "image":
            prompt = entry.get("prompt", "")
            model = entry.get("model", "")
            width = entry.get("width", "")
            height = entry.get("height", "")
            history_text += f"üñº –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{prompt}'\n–ú–æ–¥–µ–ª—å: {model}, –†–∞–∑–º–µ—Ä: {width}x{height}\n\n"
            valid_entries += 1
        
        elif entry_type == "transcribe":
            response = entry.get("response", "")
            history_text += f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è: {response[:50]}...\n\n"
            valid_entries += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
    if history_text.strip():
        await query.message.answer(history_text)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")]
    ])
    
    if valid_entries == 0:
        await query.message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    
    await query.message.answer("–ö–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=keyboard)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda query: query.data.startswith("admin_block_"))
async def handle_admin_block(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if is_admin(user_id):
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    if user_id in blocked_users:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    blocked_users[user_id] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@router.callback_query(lambda query: query.data.startswith("admin_unblock_"))
async def handle_admin_unblock(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_id = int(query.data.split("_")[2])
    
    if user_id not in blocked_users:
        await query.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    del blocked_users[user_id]
    save_blocked_users()
    
    await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await query.message.edit_text(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—è—Ç–æ" –∏ "–ù–µ –ø—Ä–∏–Ω—è—Ç–æ"
@router.callback_query(lambda query: query.data.startswith("response_"))
async def handle_response(callback: CallbackQuery):
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ callback
    logging.info(f"Callback data: {callback.data}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    parts = callback.data.split("_")
    
    if len(parts) < 4:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    response_type = parts[1]  # "accepted" –∏–ª–∏ "rejected"
    admin_id = int(parts[2])  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = int(parts[3])   # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
    if response_type == "accepted":
        new_prefix = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
    else:
        new_prefix = "‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ"

    try:      
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        state = admin_states.get(admin_id, {})
        original_text = state.get("message_text", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        user_info_str = state.get("user_info_str", f"ID: {user_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        response_text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info_str} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            f"‚ñ´Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: \"{original_text}\"\n"
            f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {new_prefix}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            chat_id=admin_id,
            text=response_text,
            reply_to_message_id=state.get("admin_msg_id")
        )

        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if admin_id in admin_states:
            del admin_states[admin_id]


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda query: query.data == "admin_blocked_list")
async def handle_blocked_list(query: CallbackQuery):
    if not is_admin(query.from_user.id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not blocked_users:
        await query.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return
    
    text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, block_date in blocked_users.items():
        if is_admin(user_id):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            
        user_info_str = get_user_info_str(user_id)
        text += f"{user_info_str}\n–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_date}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
    ])
    
    await query.message.edit_text(text, reply_markup=keyboard)


# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_cancel –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(lambda query: query.data == "admin_cancel")
async def handle_admin_cancel(query: CallbackQuery):
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await query.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(lambda message: message.from_user.id in blocked_users)
async def handle_blocked_user(message: Message):
    await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–ê–†–ò–ê–ù–¢)
@router.callback_query(lambda query: query.data.startswith("admin_"))
async def handle_admin_actions(query: CallbackQuery):
    admin_id = query.from_user.id
    if not is_admin(admin_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return 
    data = query.data
    # –£–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin_user_ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if data == "admin_broadcast":
        admin_states[admin_id] = {"action": "broadcast"}
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        await query.answer()
  
    elif data == "admin_cancel":
        if admin_id in admin_states:
            del admin_states[admin_id]
        await query.message.edit_reply_markup()
        await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ admin-–¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
